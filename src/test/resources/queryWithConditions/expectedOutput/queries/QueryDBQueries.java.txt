package no.fellesstudentsystem.graphql.queries;

import static no.fellesstudentsystem.kjerneapi.FieldHelpers.*;
import static no.fellesstudentsystem.kjerneapi.Keys.*;
import static no.fellesstudentsystem.kjerneapi.Tables.*;
import static org.jooq.Functions.*;
import static org.jooq.impl.DSL.*;

import java.lang.String;
import java.util.List;
import javax.inject.Inject;
import no.fellesstudentsystem.graphql.generated.model.Emne;
import no.fellesstudentsystem.graphql.generated.model.EmneInput;
import no.fellesstudentsystem.graphql.generated.model.Emnenavn;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSets;
import org.jooq.DSLContext;

public class QueryDBQueries {
    @Inject
    DSLContext ctx;

    public List<Emne> paramConditionForQuery(String eierInstitusjonsnummer, List<String> emnekoder,
            SelectionSets select) {
        return ctx
                .select(
                        row(
                                EMNE.getId().as("id"),
                                select.optional("kode", EMNE.EMNEKODE).as("kode"),
                                row(
                                        select.optional("navn/eng", EMNE.EMNENAVN_ENGELSK).as("eng"),
                                        select.optional("navn/nob", EMNE.EMNENAVN_BOKMAL).as("nob"),
                                        select.optional("navn/nno", EMNE.EMNENAVN_NYNORSK).as("nno"),
                                        select.optional("navn/sme", EMNE.EMNENAVN_SAMISK).as("sme")
                                ).mapping(Emnenavn::new).as("navn"),
                                select.optional("versjonskode", EMNE.VERSJONSKODE).as("versjonskode")
                        ).mapping((a0, a1, a2, a3) -> a0 == null && a1 == null && (a2 == null || new Emnenavn().equals(a2)) && a3 == null ? null : new Emne(a0, a1, a2, a3)).as("paramCondition")
                )
                .from(EMNE)
                .where(EMNE.INSTITUSJONSNR_EIER.eq(eierInstitusjonsnummer))
                .and(emnekoder != null && emnekoder.size() > 0 ? EMNE.EMNEKODE.in(emnekoder) : noCondition())
                .and(no.fellesstudentsystem.kjerneapi.conditions.test_conditions.EmneTestConditions.emneKoder(EMNE, emnekoder))
                .orderBy(EMNE.getIdFields())
                .fetch(0, Emne.class);
    }

    public List<Emne> paramConditionOverrideForQuery(String eierInstitusjonsnummer,
            List<String> emnekoder, SelectionSets select) {
        return ctx
                .select(
                        row(
                                EMNE.getId().as("id"),
                                select.optional("kode", EMNE.EMNEKODE).as("kode"),
                                row(
                                        select.optional("navn/eng", EMNE.EMNENAVN_ENGELSK).as("eng"),
                                        select.optional("navn/nob", EMNE.EMNENAVN_BOKMAL).as("nob"),
                                        select.optional("navn/nno", EMNE.EMNENAVN_NYNORSK).as("nno"),
                                        select.optional("navn/sme", EMNE.EMNENAVN_SAMISK).as("sme")
                                ).mapping(Emnenavn::new).as("navn"),
                                select.optional("versjonskode", EMNE.VERSJONSKODE).as("versjonskode")
                        ).mapping((a0, a1, a2, a3) -> a0 == null && a1 == null && (a2 == null || new Emnenavn().equals(a2)) && a3 == null ? null : new Emne(a0, a1, a2, a3)).as("paramConditionOverride")
                )
                .from(EMNE)
                .where(EMNE.INSTITUSJONSNR_EIER.eq(eierInstitusjonsnummer))
                .and(no.fellesstudentsystem.kjerneapi.conditions.test_conditions.EmneTestConditions.emneKoder(EMNE, emnekoder))
                .orderBy(EMNE.getIdFields())
                .fetch(0, Emne.class);
    }

    public List<Emne> fieldConditionForQuery(String eierInstitusjonsnummer, List<String> emnekoder,
            SelectionSets select) {
        return ctx
                .select(
                        row(
                                EMNE.getId().as("id"),
                                select.optional("kode", EMNE.EMNEKODE).as("kode"),
                                row(
                                        select.optional("navn/eng", EMNE.EMNENAVN_ENGELSK).as("eng"),
                                        select.optional("navn/nob", EMNE.EMNENAVN_BOKMAL).as("nob"),
                                        select.optional("navn/nno", EMNE.EMNENAVN_NYNORSK).as("nno"),
                                        select.optional("navn/sme", EMNE.EMNENAVN_SAMISK).as("sme")
                                ).mapping(Emnenavn::new).as("navn"),
                                select.optional("versjonskode", EMNE.VERSJONSKODE).as("versjonskode")
                        ).mapping((a0, a1, a2, a3) -> a0 == null && a1 == null && (a2 == null || new Emnenavn().equals(a2)) && a3 == null ? null : new Emne(a0, a1, a2, a3)).as("fieldCondition")
                )
                .from(EMNE)
                .where(EMNE.INSTITUSJONSNR_EIER.eq(eierInstitusjonsnummer))
                .and(emnekoder != null && emnekoder.size() > 0 ? EMNE.EMNEKODE.in(emnekoder) : noCondition())
                .and(no.fellesstudentsystem.kjerneapi.conditions.test_conditions.EmneTestConditions.emneAll(EMNE, eierInstitusjonsnummer, emnekoder))
                .orderBy(EMNE.getIdFields())
                .fetch(0, Emne.class);
    }

    public List<Emne> fieldConditionOverrideForQuery(String eierInstitusjonsnummer,
            List<String> emnekoder, SelectionSets select) {
        return ctx
                .select(
                        row(
                                EMNE.getId().as("id"),
                                select.optional("kode", EMNE.EMNEKODE).as("kode"),
                                row(
                                        select.optional("navn/eng", EMNE.EMNENAVN_ENGELSK).as("eng"),
                                        select.optional("navn/nob", EMNE.EMNENAVN_BOKMAL).as("nob"),
                                        select.optional("navn/nno", EMNE.EMNENAVN_NYNORSK).as("nno"),
                                        select.optional("navn/sme", EMNE.EMNENAVN_SAMISK).as("sme")
                                ).mapping(Emnenavn::new).as("navn"),
                                select.optional("versjonskode", EMNE.VERSJONSKODE).as("versjonskode")
                        ).mapping((a0, a1, a2, a3) -> a0 == null && a1 == null && (a2 == null || new Emnenavn().equals(a2)) && a3 == null ? null : new Emne(a0, a1, a2, a3)).as("fieldConditionOverride")
                )
                .from(EMNE)
                .where(no.fellesstudentsystem.kjerneapi.conditions.test_conditions.EmneTestConditions.emneAll(EMNE, eierInstitusjonsnummer, emnekoder))
                .orderBy(EMNE.getIdFields())
                .fetch(0, Emne.class);
    }

    public List<Emne> fieldAndParamConditionForQuery(String eierInstitusjonsnummer,
            List<String> emnekoder, SelectionSets select) {
        return ctx
                .select(
                        row(
                                EMNE.getId().as("id"),
                                select.optional("kode", EMNE.EMNEKODE).as("kode"),
                                row(
                                        select.optional("navn/eng", EMNE.EMNENAVN_ENGELSK).as("eng"),
                                        select.optional("navn/nob", EMNE.EMNENAVN_BOKMAL).as("nob"),
                                        select.optional("navn/nno", EMNE.EMNENAVN_NYNORSK).as("nno"),
                                        select.optional("navn/sme", EMNE.EMNENAVN_SAMISK).as("sme")
                                ).mapping(Emnenavn::new).as("navn"),
                                select.optional("versjonskode", EMNE.VERSJONSKODE).as("versjonskode")
                        ).mapping((a0, a1, a2, a3) -> a0 == null && a1 == null && (a2 == null || new Emnenavn().equals(a2)) && a3 == null ? null : new Emne(a0, a1, a2, a3)).as("fieldAndParamCondition")
                )
                .from(EMNE)
                .where(EMNE.INSTITUSJONSNR_EIER.eq(eierInstitusjonsnummer))
                .and(emnekoder != null && emnekoder.size() > 0 ? EMNE.EMNEKODE.in(emnekoder) : noCondition())
                .and(no.fellesstudentsystem.kjerneapi.conditions.test_conditions.EmneTestConditions.emneKoder(EMNE, emnekoder))
                .and(no.fellesstudentsystem.kjerneapi.conditions.test_conditions.EmneTestConditions.emneAll(EMNE, eierInstitusjonsnummer, emnekoder))
                .orderBy(EMNE.getIdFields())
                .fetch(0, Emne.class);
    }

    public List<Emne> fieldAndParamConditionOverrideForQuery(String eierInstitusjonsnummer,
            List<String> emnekoder, SelectionSets select) {
        return ctx
                .select(
                        row(
                                EMNE.getId().as("id"),
                                select.optional("kode", EMNE.EMNEKODE).as("kode"),
                                row(
                                        select.optional("navn/eng", EMNE.EMNENAVN_ENGELSK).as("eng"),
                                        select.optional("navn/nob", EMNE.EMNENAVN_BOKMAL).as("nob"),
                                        select.optional("navn/nno", EMNE.EMNENAVN_NYNORSK).as("nno"),
                                        select.optional("navn/sme", EMNE.EMNENAVN_SAMISK).as("sme")
                                ).mapping(Emnenavn::new).as("navn"),
                                select.optional("versjonskode", EMNE.VERSJONSKODE).as("versjonskode")
                        ).mapping((a0, a1, a2, a3) -> a0 == null && a1 == null && (a2 == null || new Emnenavn().equals(a2)) && a3 == null ? null : new Emne(a0, a1, a2, a3)).as("fieldAndParamConditionOverride")
                )
                .from(EMNE)
                .where(no.fellesstudentsystem.kjerneapi.conditions.test_conditions.EmneTestConditions.emneKoder(EMNE, emnekoder))
                .and(no.fellesstudentsystem.kjerneapi.conditions.test_conditions.EmneTestConditions.emneAll(EMNE, eierInstitusjonsnummer, emnekoder))
                .orderBy(EMNE.getIdFields())
                .fetch(0, Emne.class);
    }

    public List<Emne> fieldAndParamConditionOverrideBothForQuery(String eierInstitusjonsnummer,
            List<String> emnekoder, SelectionSets select) {
        return ctx
                .select(
                        row(
                                EMNE.getId().as("id"),
                                select.optional("kode", EMNE.EMNEKODE).as("kode"),
                                row(
                                        select.optional("navn/eng", EMNE.EMNENAVN_ENGELSK).as("eng"),
                                        select.optional("navn/nob", EMNE.EMNENAVN_BOKMAL).as("nob"),
                                        select.optional("navn/nno", EMNE.EMNENAVN_NYNORSK).as("nno"),
                                        select.optional("navn/sme", EMNE.EMNENAVN_SAMISK).as("sme")
                                ).mapping(Emnenavn::new).as("navn"),
                                select.optional("versjonskode", EMNE.VERSJONSKODE).as("versjonskode")
                        ).mapping((a0, a1, a2, a3) -> a0 == null && a1 == null && (a2 == null || new Emnenavn().equals(a2)) && a3 == null ? null : new Emne(a0, a1, a2, a3)).as("fieldAndParamConditionOverrideBoth")
                )
                .from(EMNE)
                .where(no.fellesstudentsystem.kjerneapi.conditions.test_conditions.EmneTestConditions.emneKoder(EMNE, emnekoder))
                .and(no.fellesstudentsystem.kjerneapi.conditions.test_conditions.EmneTestConditions.emneAll(EMNE, eierInstitusjonsnummer, emnekoder))
                .orderBy(EMNE.getIdFields())
                .fetch(0, Emne.class);
    }

    public List<Emne> fieldInputConditionForQuery(String eierInstitusjonsnummer,
            EmneInput emneInput, SelectionSets select) {
        return ctx
                .select(
                        row(
                                EMNE.getId().as("id"),
                                select.optional("kode", EMNE.EMNEKODE).as("kode"),
                                row(
                                        select.optional("navn/eng", EMNE.EMNENAVN_ENGELSK).as("eng"),
                                        select.optional("navn/nob", EMNE.EMNENAVN_BOKMAL).as("nob"),
                                        select.optional("navn/nno", EMNE.EMNENAVN_NYNORSK).as("nno"),
                                        select.optional("navn/sme", EMNE.EMNENAVN_SAMISK).as("sme")
                                ).mapping(Emnenavn::new).as("navn"),
                                select.optional("versjonskode", EMNE.VERSJONSKODE).as("versjonskode")
                        ).mapping((a0, a1, a2, a3) -> a0 == null && a1 == null && (a2 == null || new Emnenavn().equals(a2)) && a3 == null ? null : new Emne(a0, a1, a2, a3)).as("fieldInputCondition")
                )
                .from(EMNE)
                .where(EMNE.INSTITUSJONSNR_EIER.eq(eierInstitusjonsnummer))
                .and(emneInput != null ? EMNE.EMNEKODE.eq(emneInput.getKode()) : noCondition())
                .and(no.fellesstudentsystem.kjerneapi.conditions.test_conditions.EmneTestConditions.emneKode(EMNE, emneInput != null ? emneInput.getKode() : null))
                .and(emneInput != null ? EMNE.VERSJONSKODE.eq(emneInput.getVersjonskode()) : noCondition())
                .and(no.fellesstudentsystem.kjerneapi.conditions.test_conditions.EmneTestConditions.emneInputAll(EMNE, eierInstitusjonsnummer, emneInput != null ? emneInput.getKode() : null, emneInput != null ? emneInput.getVersjonskode() : null))
                .orderBy(EMNE.getIdFields())
                .fetch(0, Emne.class);
    }
}
