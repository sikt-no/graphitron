type Query {
  # Tests only output records as input is not yet supported.
  query(ids: [ID!]! @field(name: "CUSTOMER_ID")): [Customer] @service(service: {name: "TEST_FETCH_CUSTOMER"})
  queryRecord: [CustomerJava] @service(service: {name: "TEST_FETCH_CUSTOMER"})
}

type Mutation {
  # Tests both input and output records.
  mutation(in: CustomerInput): [Customer] @service(service: {name: "TEST_CUSTOMER"})
  mutationRecord(in: CustomerJava): [CustomerJava] @service(service: {name: "TEST_CUSTOMER"})
}

input CustomerInput @table(name: "Customer") {
  id: ID!
}

type Customer implements Node @table {
  id: ID!
}

type CustomerJava @record(record: {name: "TEST_CUSTOMER_RECORD"}) {
  id: ID! @field(name: "someID")
  customer: Customer @field(name: "record")
}
