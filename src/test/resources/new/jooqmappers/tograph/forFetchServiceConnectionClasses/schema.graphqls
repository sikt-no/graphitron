type Query {
  customersQueryConnection(first: Int = 100, after: String): CustomerConnection @service(service : {name: "MAPPER_DUMMY_SERVICE"})
}

type CustomerConnection {
  edges: [CustomerConnectionEdge]
  nodes: [Customer!]!
}

type CustomerConnectionEdge {
  cursor: String
  node: Customer
}

type Customer implements Node @table {
  id: ID!
  historicalAddresses(first: Int = 10, after: String): AddressConnection @splitQuery @service(service : {name: "MAPPER_DUMMY_SERVICE"})
}

type AddressConnection {
  edges: [AddressConnectionEdge]
  nodes: [Address!]!
}

type AddressConnectionEdge {
  cursor: String
  node: Address
}

type Address implements Node @table {
  id: ID!

  # Should be able to find these.
  city: City @splitQuery @service(service : {name: "MAPPER_DUMMY_SERVICE"})
  cityPaginated(first: String, after: Int): CityConnection @splitQuery @service(service : {name: "MAPPER_DUMMY_SERVICE"})

  # Test that those do NOT generate any mappings, since they do not belong to this mapper.
  recordCity: RecordCity @splitQuery @service(service : {name: "MAPPER_DUMMY_SERVICE"})
  recordCityPaginated(first: String, after: Int): RecordCityConnection @splitQuery @service(service : {name: "MAPPER_DUMMY_SERVICE"})
}

type CityConnection {
  edges: [CityConnectionEdge]
  nodes: [City!]!
}

type CityConnectionEdge {
  cursor: String
  node: City
}

type RecordCityConnection {
  edges: [RecordCityConnectionEdge]
  nodes: [RecordCity!]!
}

type RecordCityConnectionEdge {
  cursor: String
  node: RecordCity
}

type City implements Node @table {
  id: ID!
}

type RecordCity @record(record: {name: "MAPPER_DUMMY_RECORD"}) {
  id: ID!
}
