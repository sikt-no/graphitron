type Mutation {
  # When setting service.
  service1(cityInput: CityInput1): ID @service(service: {name: "DUMMY_SERVICE"})
  service2(cityInput: CityInput3): ID @service(service: {name: "DUMMY_SERVICE"})

  # Nested case, service in a resolver.
  serviceResolver: Store # TODO: This element should not be found. No operation type is set.
}

# Layer without record.
input CityInput1 {
  city: CityInput2
}

input CityInput2 @record(record: {name: "DUMMY_RECORD"}) {
  cityId: String! @field(name: "CITY_ID")
}

input CityInput3 @record(record: {name: "DUMMY_RECORD"}) {
  city: CityInput4
}

input CityInput4 @record(record: {name: "DUMMY_RECORD"}) {
  cityId: String! @field(name: "CITY_ID")
}

type Store @table {
  id: ID!
  address(input: AddressInput): Address @splitQuery @service(service: {name: "DUMMY_SERVICE"})
}

input AddressInput @record(record: {name: "DUMMY_RECORD"}) {
  id: ID!
}

type Address @table {
  id: ID!
}
