type Query {
  customerQuery: Customer @service(service: {name: "DUMMY_SERVICE"})
  # films: [Film] # Irrelevant other query, should not find this. TODO: This is actually found right now, but should not be.
}

type Film implements Node @table @record(record: {name: "DUMMY_RECORD"}) {
  id: ID!
}

type Customer implements Node @table {
  id: ID!
  wrapper: Wrapper
  historicalAddresses: [Address!]! @splitQuery @service(service: {name: "DUMMY_SERVICE"})
}

type Wrapper {
  historicalAddressesWrapped: [AddressWrapped!]! @splitQuery @service(service: {name: "DUMMY_SERVICE"})
}

type Address @table {
  id: ID!

  city: AddressCity0 # This should not be found.
  cityRecord: AddressCity1 # Table ignores record directive.
}

type AddressWrapped @table {
  id: ID!

  city: AddressCity0 # This should not be found.
  cityRecord: AddressCity1 # Table ignores record directive.
}

type AddressCity0 @table(name: "CITY") {
  city: String!
}

type AddressCity1 @record(record: {name: "DUMMY_RECORD"}) {
  city: String!
}
