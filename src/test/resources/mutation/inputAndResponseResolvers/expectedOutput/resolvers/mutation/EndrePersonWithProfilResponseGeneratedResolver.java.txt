package fake.code.example.package.resolvers.mutation;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import javax.inject.Inject;
import no.fellesstudentsystem.graphitron.services.TestPersonService;
import fake.graphql.example.package.api.EndrePersonWithProfilResponseMutationResolver;
import fake.graphql.example.package.model.EndreResponseWithPerson;
import fake.graphql.example.package.model.PersonProfil;
import fake.graphql.example.package.model.Postadresse;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSet;
import fake.code.example.package.queries.query.PersonProfilDBQueries;
import fake.code.example.package.queries.query.PostadresseDBQueries;
import org.jooq.DSLContext;

public class EndrePersonWithProfilResponseGeneratedResolver implements EndrePersonWithProfilResponseMutationResolver {
    @Inject
    DSLContext ctx;

    @Inject
    private PersonProfilDBQueries personProfilDBQueries;

    @Inject
    private PostadresseDBQueries postadresseDBQueries;

    @Override
    public CompletableFuture<EndreResponseWithPerson> endrePersonWithProfilResponse(String id,
            DataFetchingEnvironment env) throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var testPersonService = new TestPersonService(ctx);
        var select = new SelectionSet(env.getSelectionSet());

        var endrePersonWithProfilResponseResult = testPersonService.endrePersonWithProfilResponse(id);

        var endreResponseWithPersonPersonProfil = getEndreResponseWithPersonPersonProfil(ctx, endrePersonWithProfilResponseResult, select);
        var endreResponseWithPersonPost = getEndreResponseWithPersonPost(ctx, endrePersonWithProfilResponseResult, select);

        var endreResponseWithPerson = new EndreResponseWithPerson();
        endreResponseWithPerson.setId(endrePersonWithProfilResponseResult.getId());
        endreResponseWithPerson.setPersonProfil(endreResponseWithPersonPersonProfil);
        endreResponseWithPerson.setPost(endreResponseWithPersonPost);

        return CompletableFuture.completedFuture(endreResponseWithPerson);
    }

    private PersonProfil getEndreResponseWithPersonPersonProfil(
            DSLContext ctx, no.fellesstudentsystem.graphitron.services.TestPersonService.EndrePersonResponse idContainer,
            SelectionSet select) {
        if (!select.contains("personProfil") || idContainer == null) {
            return null;
        }

        var nodes = personProfilDBQueries.loadPersonProfilByIdsAsNode(ctx, Set.of(idContainer.getPersProf().getId()), select.withPrefix("personProfil"));
        return nodes.values().stream().findFirst().orElse(null);
    }

    private Postadresse getEndreResponseWithPersonPost(
            DSLContext ctx, no.fellesstudentsystem.graphitron.services.TestPersonService.EndrePersonResponse idContainer,
            SelectionSet select) {
        if (!select.contains("post") || idContainer == null) {
            return null;
        }

        var nodes = postadresseDBQueries.loadPostadresseByIdsAsNode(ctx, Set.of(idContainer.getPost().getId()), select.withPrefix("post"));
        return nodes.values().stream().findFirst().orElse(null);
    }
}
