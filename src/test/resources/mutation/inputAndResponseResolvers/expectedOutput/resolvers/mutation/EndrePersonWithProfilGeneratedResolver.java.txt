package no.fellesstudentsystem.graphql.resolvers.mutation;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import javax.inject.Inject;
import no.fellesstudentsystem.graphitron.services.TestPersonService;
import no.fellesstudentsystem.graphql.generated.api.EndrePersonWithProfilMutationResolver;
import no.fellesstudentsystem.graphql.generated.model.PersonProfil;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSets;
import no.fellesstudentsystem.graphql.queries.query.PersonProfilDBQueries;
import org.jooq.DSLContext;

public class EndrePersonWithProfilGeneratedResolver implements EndrePersonWithProfilMutationResolver {
    @Inject
    DSLContext ctx;

    @Inject
    private PersonProfilDBQueries personProfilDBQueries;

    @Override
    public CompletableFuture<PersonProfil> endrePersonWithProfil(String id,
            DataFetchingEnvironment env) throws Exception {
        var testPersonService = new TestPersonService(ctx);
        var select = new SelectionSets(env.getSelectionSet());

        var terminatorResult = testPersonService.endrePersonWithProfil(id);
        var personProfilEndrePersonWithProfil = getPersonProfilEndrePersonWithProfil(terminatorResult, select);

        return CompletableFuture.completedFuture(personProfilEndrePersonWithProfil);
    }

    private PersonProfil getPersonProfilEndrePersonWithProfil(
            no.fellesstudentsystem.kjerneapi.tables.records.PersonRecord result,
            SelectionSets select) {
        if (!select.contains("endrePersonWithProfil") || result == null) {
            return null;
        }

        var nodes = personProfilDBQueries.loadPersonProfilByIdsAsNode(Set.of(result.getId()), select.withPrefix("endrePersonWithProfil"));
        return nodes.values().stream().findFirst().orElse(null);
    }
}
