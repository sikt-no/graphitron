input InsertInput @table(name : "CUSTOMER") {
  id: ID!
  customerId: String! @field(name: "CUSTOMER_ID")
  firstName: String! @field(name: "FIRST_NAME")
  lastName: String! @field(name: "LAST_NAME")
  storeId: String! @field(name: "STORE_ID")
  addressId: String! @field(name: "ADDRESS_ID")
  active: Boolean! @field(name: "ACTIVEBOOL")
  createdDate: Date! @field(name: "CREATE_DATE")
}

type InsertResponse {
  id: ID!
  firstName: String @field(name : "FIRST_NAME")
  email: String @field(name : "emailField")
}

type InsertResponseWithCustomer {
  id: ID!
  customer: Customer @field(name : "customField")
}

type Mutation {
  insertCustomerInput(input: InsertInput!): ID! @mutation(typeName: INSERT)
  insertCustomer2Params(input: InsertInput!, lastName: String @field(name: "LAST_NAME")): ID! @mutation(typeName: INSERT)
  insertCustomerInputAndResponse(input: InsertInput!): InsertResponse! @mutation(typeName: INSERT)
  insertCustomerWithCustomerResponse(input: InsertInput!): InsertResponseWithCustomer! @mutation(typeName: INSERT)
}

type Customer implements Node @table {
  id: ID!
  firstName: String! @field(name: "FIRST_NAME")
  lastName: String! @field(name: "LAST_NAME")
  email: String
}
