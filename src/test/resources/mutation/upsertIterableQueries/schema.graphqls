input UpsertInput @table(name : "CUSTOMER") {
  id: ID!
  customerId: String! @field(name: "CUSTOMER_ID")
  firstName: String! @field(name: "FIRST_NAME")
  lastName: String! @field(name: "LAST_NAME")
  storeId: String! @field(name: "STORE_ID")
  addressId: String! @field(name: "ADDRESS_ID")
  active: Boolean! @field(name: "ACTIVEBOOL")
  createdDate: Date! @field(name: "CREATE_DATE")
}

type UpsertResponse {
  id: ID!
  firstName: String @field(name : "FIRST_NAME")
  email: String @field(name : "emailField")
}

type UpsertResponseWithCustomer {
  id: ID!
  customer: Customer @field(name : "customField")
}

type Mutation {
  upsertCustomerInput(input: [UpsertInput!]): [ID!] @mutation(typeName: UPSERT)
  upsertCustomer2Params(input: [UpsertInput!], lastName: String @field(name: "LAST_NAME")): [ID!] @mutation(typeName: UPSERT)
  upsertCustomerInputAndResponse(input: [UpsertInput!]): [UpsertResponse!] @mutation(typeName: UPSERT)
  upsertCustomerWithCustomerResponse(input: [UpsertInput!]): [UpsertResponseWithCustomer!] @mutation(typeName: UPSERT)
}

type Customer implements Node @table {
  id: ID!
  firstName: String! @field(name: "FIRST_NAME")
  lastName: String! @field(name: "LAST_NAME")
  email: String
}
