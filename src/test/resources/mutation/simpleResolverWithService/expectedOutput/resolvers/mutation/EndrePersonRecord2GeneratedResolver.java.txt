package fake.code.example.package.resolvers.mutation;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;
import javax.inject.Inject;
import no.fellesstudentsystem.graphitron.services.TestPersonService;
import fake.graphql.example.package.api.EndrePersonRecord2MutationResolver;
import fake.graphql.example.package.model.EndreResponse2;
import fake.graphql.example.package.model.PersonProfil;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSet;
import fake.code.example.package.queries.query.PersonProfilDBQueries;
import org.jooq.DSLContext;

public class EndrePersonRecord2GeneratedResolver implements EndrePersonRecord2MutationResolver {
    @Inject
    DSLContext ctx;


    @Inject
    private PersonProfilDBQueries personProfilDBQueries;

    @Override
    public CompletableFuture<EndreResponse2> endrePersonRecord2(List<String> id,
            DataFetchingEnvironment env) throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var testPersonService = new TestPersonService(ctx);
        var select = new SelectionSet(env.getSelectionSet());

        var endrePersonRecord2Result = testPersonService.endrePersonRecord2(id);
        var endreResponse2PersonProfiler = getEndreResponse2PersonProfiler(ctx, endrePersonRecord2Result, select);

        var endreResponse2 = new EndreResponse2();
        endreResponse2.setId2(endrePersonRecord2Result.stream().map(itId2 -> itId2.getId()).collect(Collectors.toList()));
        endreResponse2.setPersonProfiler(new ArrayList<>(endreResponse2PersonProfiler.values()));

        return CompletableFuture.completedFuture(endreResponse2);
    }

    private Map<String, PersonProfil> getEndreResponse2PersonProfiler(
            DSLContext ctx, List<no.fellesstudentsystem.kjerneapi.tables.records.PersonRecord> idContainer,
            SelectionSet select) {
        if (!select.contains("personProfiler") || idContainer == null) {
            return Map.of();
        }

        var ids = idContainer.stream().map(it -> it.getId()).collect(Collectors.toSet());
        return personProfilDBQueries.loadPersonProfilByIdsAsNode(ctx, ids, select.withPrefix("personProfiler"));
    }
}
