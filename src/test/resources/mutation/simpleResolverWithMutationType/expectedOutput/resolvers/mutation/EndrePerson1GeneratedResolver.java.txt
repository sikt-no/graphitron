package fake.code.example.package.resolvers.mutation;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;
import javax.inject.Inject;
import fake.graphql.example.package.api.EndrePerson1MutationResolver;
import fake.graphql.example.package.model.EndreInput;
import fake.graphql.example.package.model.EndreResponse1;
import fake.code.example.package.queries.mutation.EndrePerson1DBQueries;
import no.fellesstudentsystem.graphql.helpers.arguments.Arguments;
import no.fellesstudentsystem.kjerneapi.FieldHelpers;
import no.fellesstudentsystem.kjerneapi.tables.records.PersonRecord;
import org.jooq.DSLContext;

public class EndrePerson1GeneratedResolver implements EndrePerson1MutationResolver {
    @Inject
    DSLContext ctx;


    @Inject
    private EndrePerson1DBQueries endrePerson1DBQueries;

    @Override
    public CompletableFuture<EndreResponse1> endrePerson1(List<String> id, List<EndreInput> in,
            DataFetchingEnvironment env) throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var flatArguments = Arguments.flattenArgumentKeys(env.getArguments());

        var inRecordList = new ArrayList<PersonRecord>();


        if (in != null) {
            for (var itIn : in) {
                if (itIn == null) continue;
                var inRecord = new PersonRecord();
                inRecord.attach(ctx.configuration());
                if (flatArguments.contains("in/fornavn")) {
                    inRecord.setFornavn(itIn.getFornavn());
                }
                inRecordList.add(inRecord);
            }
        }
        FieldHelpers.setPersonKeysFromPlattformIds(ctx, inRecordList);

        var rowsUpdated = endrePerson1DBQueries.endrePerson1(ctx, id, inRecordList);

        var endreResponse1 = new EndreResponse1();
        endreResponse1.setId1(id.stream().map(it -> it.getId()).collect(Collectors.toList()));

        return CompletableFuture.completedFuture(endreResponse1);
    }
}
