package fake.code.example.package.resolvers.mutation;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import javax.inject.Inject;
import fake.graphql.example.package.api.EndrePersonRecord0MutationResolver;
import fake.graphql.example.package.model.EndreInput;
import fake.graphql.example.package.model.EndreResponse0;
import fake.code.example.package.queries.mutation.EndrePersonRecord0DBQueries;
import no.fellesstudentsystem.graphql.helpers.arguments.Arguments;
import no.fellesstudentsystem.kjerneapi.FieldHelpers;
import no.fellesstudentsystem.kjerneapi.tables.records.PersonRecord;
import org.jooq.DSLContext;

public class EndrePersonRecord0GeneratedResolver implements EndrePersonRecord0MutationResolver {
    @Inject
    DSLContext ctx;

    @Inject
    private EndrePersonRecord0DBQueries endrePersonRecord0DBQueries;

    @Override
    public CompletableFuture<EndreResponse0> endrePersonRecord0(String id, EndreInput in,
            DataFetchingEnvironment env) throws Exception {
        var flatArguments = Arguments.flattenArgumentKeys(env.getArguments());

        var inRecord = new PersonRecord();
        inRecord.attach(ctx.configuration());

        if (in != null) {
            if (flatArguments.contains("in/fornavn")) {
                inRecord.setFornavn(in.getFornavn());
            }
            FieldHelpers.setPersonKeysFromPlattformIds(ctx, inRecord);
        }

        var rowsUpdated = endrePersonRecord0DBQueries.endrePersonRecord0(id, inRecord);

        var endreResponse0 = new EndreResponse0();
        endreResponse0.setId0(id);

        return CompletableFuture.completedFuture(endreResponse0);
    }
}
