package fake.code.example.package.resolvers.mutation;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Override;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import javax.inject.Inject;
import fake.graphql.example.package.api.EndrePersonWithProfilMutationResolver;
import fake.graphql.example.package.model.EndreInput;
import fake.graphql.example.package.model.ListedResponse;
import fake.graphql.example.package.model.PersonProfil;
import fake.graphql.example.package.model.Result;
import no.fellesstudentsystem.graphql.helpers.arguments.Arguments;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSet;
import fake.code.example.package.queries.mutation.EndrePersonWithProfilDBQueries;
import fake.code.example.package.queries.query.PersonProfilDBQueries;
import no.fellesstudentsystem.kjerneapi.FieldHelpers;
import no.fellesstudentsystem.kjerneapi.tables.records.PersonRecord;
import org.jooq.DSLContext;

public class EndrePersonWithProfilGeneratedResolver implements EndrePersonWithProfilMutationResolver {
    @Inject
    DSLContext ctx;


    @Inject
    private EndrePersonWithProfilDBQueries endrePersonWithProfilDBQueries;

    @Inject
    private PersonProfilDBQueries personProfilDBQueries;

    @Override
    public CompletableFuture<ListedResponse> endrePersonWithProfil(EndreInput input,
            DataFetchingEnvironment env) throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var select = new SelectionSet(env.getSelectionSet());
        var flatArguments = Arguments.flattenArgumentKeys(env.getArguments());

        var inputRecord = new PersonRecord();
        inputRecord.attach(ctx.configuration());

        if (input != null) {
            if (flatArguments.contains("input/privatEpost")) {
                inputRecord.setEmailadressePrivat(input.getPrivatEpost());
            }
            if (flatArguments.contains("input/id")) {
                inputRecord.setId(input.getId());
            }
            if (flatArguments.contains("input/fornavn")) {
                inputRecord.setFornavn(input.getFornavn());
            }
            FieldHelpers.setPersonKeysFromPlattformIds(ctx, inputRecord);
        }

        var rowsUpdated = endrePersonWithProfilDBQueries.endrePersonWithProfil(ctx, inputRecord);
        var inputRecordPersonProfil = getResultPersonProfil(ctx, inputRecord, select);

        var listedResponse = new ListedResponse();

        var result = new Result();
        result.setPersonProfil(inputRecordPersonProfil);
        listedResponse.setResults(List.of(result));

        return CompletableFuture.completedFuture(listedResponse);
    }

    private PersonProfil getResultPersonProfil(DSLContext ctx, PersonRecord idContainer, SelectionSet select) {
        if (!select.contains("results/personProfil") || idContainer == null) {
            return null;
        }

        var nodes = personProfilDBQueries.loadPersonProfilByIdsAsNode(ctx, Set.of(idContainer.getId()), select.withPrefix("results/personProfil"));
        return nodes.values().stream().findFirst().orElse(null);
    }
}
