package no.fellesstudentsystem.graphql.resolvers.mutation;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Override;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import javax.inject.Inject;
import no.fellesstudentsystem.graphql.generated.api.SlettPersonWithProfilMutationResolver;
import no.fellesstudentsystem.graphql.generated.model.EndreInput;
import no.fellesstudentsystem.graphql.generated.model.ListedResponse;
import no.fellesstudentsystem.graphql.generated.model.PersonProfil;
import no.fellesstudentsystem.graphql.generated.model.Result;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSet;
import no.fellesstudentsystem.graphql.queries.mutation.SlettPersonWithProfilDBQueries;
import no.fellesstudentsystem.graphql.queries.query.PersonProfilDBQueries;
import no.fellesstudentsystem.kjerneapi.FieldHelpers;
import no.fellesstudentsystem.kjerneapi.tables.records.PersonRecord;
import org.jooq.DSLContext;

public class SlettPersonWithProfilGeneratedResolver implements SlettPersonWithProfilMutationResolver {
    @Inject
    DSLContext ctx;

    @Inject
    private PersonProfilDBQueries personProfilDBQueries;

    @Inject
    private SlettPersonWithProfilDBQueries slettPersonWithProfilDBQueries;

    @Override
    public CompletableFuture<ListedResponse> slettPersonWithProfil(EndreInput input,
            DataFetchingEnvironment env) throws Exception {
        var select = new SelectionSet(env.getSelectionSet());
        var inputRecord = new PersonRecord();
        inputRecord.attach(ctx.configuration());

        if (input != null) {
            inputRecord.setId(input.getId());
            inputRecord.setFornavn(input.getFornavn());
            inputRecord.setEmailadressePrivat(input.getPrivatEpost());
            FieldHelpers.setPersonKeysFromPlattformIds(ctx, inputRecord);
        }

        var rowsUpdated = slettPersonWithProfilDBQueries.slettPersonWithProfil(inputRecord);
        var inputRecordPersonProfil = getResultPersonProfil(inputRecord, select);

        var listedResponse = new ListedResponse();

        var result = new Result();
        result.setPersonProfil(inputRecordPersonProfil);
        listedResponse.setResults(List.of(result));

        return CompletableFuture.completedFuture(listedResponse);
    }

    private PersonProfil getResultPersonProfil(PersonRecord idContainer, SelectionSet select) {
        if (!select.contains("results/personProfil") || idContainer == null) {
            return null;
        }

        var nodes = personProfilDBQueries.loadPersonProfilByIdsAsNode(Set.of(idContainer.getId()), select.withPrefix("results/personProfil"));
        return nodes.values().stream().findFirst().orElse(null);
    }
}
