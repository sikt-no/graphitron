package fake.code.example.package.resolvers.mutation;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;
import javax.inject.Inject;
import no.fellesstudentsystem.graphitron.services.TestPersonService;
import fake.graphql.example.package.api.EndrePersonNestedMutationResolver;
import fake.graphql.example.package.model.EndreInputLevel1;
import fake.graphql.example.package.model.EndreResponse;
import fake.graphql.example.package.model.EndreResponse2;
import fake.graphql.example.package.model.EndreResponse3;
import fake.graphql.example.package.model.EndreResponse4;
import fake.graphql.example.package.model.PersonProfil;
import fake.graphql.example.package.model.Postadresse;
import no.fellesstudentsystem.graphql.helpers.arguments.Arguments;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSet;
import fake.code.example.package.queries.query.PersonProfilDBQueries;
import fake.code.example.package.queries.query.PostadresseDBQueries;
import no.fellesstudentsystem.kjerneapi.FieldHelpers;
import no.fellesstudentsystem.kjerneapi.tables.records.PersonRecord;
import org.jooq.DSLContext;

public class EndrePersonNestedGeneratedResolver implements EndrePersonNestedMutationResolver {
    @Inject
    DSLContext ctx;


    @Inject
    private PersonProfilDBQueries personProfilDBQueries;

    @Inject
    private PostadresseDBQueries postadresseDBQueries;

    @Override
    public CompletableFuture<EndreResponse> endrePersonNested(EndreInputLevel1 input,
            DataFetchingEnvironment env) throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var testPersonService = new TestPersonService(ctx);
        var select = new SelectionSet(env.getSelectionSet());
        var flatArguments = Arguments.flattenArgumentKeys(env.getArguments());

        var inputRecord = new PersonRecord();
        inputRecord.attach(ctx.configuration());
        var endreA1Record = new PersonRecord();
        endreA1Record.attach(ctx.configuration());
        var endreA2Record = new PersonRecord();
        endreA2Record.attach(ctx.configuration());
        var endreBRecord = new PersonRecord();
        endreBRecord.attach(ctx.configuration());
        var endre3RecordList = new ArrayList<PersonRecord>();
        var endre4RecordList = new ArrayList<PersonRecord>();

        if (input != null) {
            var endreA1 = input.getEndreA1();
            if (endreA1 != null) {
                if (flatArguments.contains("input/endreA1/fornavn")) {
                    endreA1Record.setFornavn(endreA1.getFornavn());
                }
                FieldHelpers.setPersonKeysFromPlattformIds(ctx, endreA1Record);
            }
            var endreA2 = input.getEndreA2();
            if (endreA2 != null) {
                if (flatArguments.contains("input/endreA2/fornavn")) {
                    endreA2Record.setFornavn(endreA2.getFornavn());
                }
                FieldHelpers.setPersonKeysFromPlattformIds(ctx, endreA2Record);
            }
            var endreB = input.getEndreB();
            if (endreB != null) {
                var endre3 = endreB.getEndre3();

                if (endre3 != null) {
                    for (var itEndre3 : endre3) {
                        if (itEndre3 == null) continue;
                        var endre3Record = new PersonRecord();
                        endre3Record.attach(ctx.configuration());
                        if (flatArguments.contains("input/endreB/endre3/privatEpost")) {
                            endre3Record.setEmailadressePrivat(itEndre3.getPrivatEpost());
                        }
                        var endre4 = itEndre3.getEndre4();

                        if (endre4 != null) {
                            for (var itEndre4 : endre4) {
                                if (itEndre4 == null) continue;
                                var endre4Record = new PersonRecord();
                                endre4Record.attach(ctx.configuration());
                                if (flatArguments.contains("input/endreB/endre3/endre4/etternavn")) {
                                    endre4Record.setEtternavn(itEndre4.getEtternavn());
                                }
                                endre4RecordList.add(endre4Record);
                            }
                        }
                        FieldHelpers.setPersonKeysFromPlattformIds(ctx, endre4RecordList);
                        endre3RecordList.add(endre3Record);
                    }
                }
                FieldHelpers.setPersonKeysFromPlattformIds(ctx, endre3RecordList);
                if (flatArguments.contains("input/endreB/fornavn")) {
                    endreBRecord.setFornavn(endreB.getFornavn());
                }
                FieldHelpers.setPersonKeysFromPlattformIds(ctx, endreBRecord);
            }
            var endreC1 = input.getEndreC1();
            if (endreC1 != null) {
                if (flatArguments.contains("input/endreC1/etternavn")) {
                    inputRecord.setEtternavn(endreC1.getEtternavn());
                }
                FieldHelpers.setPersonKeysFromPlattformIds(ctx, inputRecord);
            }
            var endreC2 = input.getEndreC2();
            if (flatArguments.contains("input/id")) {
                inputRecord.setId(input.getId());
            }
            FieldHelpers.setPersonKeysFromPlattformIds(ctx, inputRecord);
        }

        var endrePersonNestedResult = testPersonService.endrePersonNested(inputRecord, endreA1Record, endreA2Record, endreBRecord, endre3RecordList, endre4RecordList);
        var endreResponse2Result = endrePersonNestedResult.getEndreResponse2();
        var endreResponse3Result = endrePersonNestedResult.getEndreResponse3();
        var endre4Result = endreResponse3Result.stream().flatMap(it -> it.getEndre4().stream()).collect(Collectors.toList());

        var endreResponse2PersonProfil = getEndreResponse2PersonProfil(ctx, endreResponse2Result, select);
        var endreResponse3PersonProfil = getEndreResponse3PersonProfil(ctx, endreResponse3Result, select);
        var endreResponse4Post = getEndreResponse4Post(ctx, endre4Result, select);

        var endreResponse = new EndreResponse();
        endreResponse.setId(endrePersonNestedResult.getId());

        var endreResponse2 = new EndreResponse2();
        endreResponse2.setId(endreResponse2Result.getId2());
        endreResponse2.setPersonProfil(endreResponse2PersonProfil);
        endreResponse.setEndreResponse2(endreResponse2);

        var endreResponse3List = new ArrayList<EndreResponse3>();
        for (var itEndreResponse3Result : endreResponse3Result) {
            var endreResponse3 = new EndreResponse3();
            endreResponse3.setId(itEndreResponse3Result.getId3());
            endreResponse3.setPersonProfil(endreResponse3PersonProfil.get(endreResponse3.getId()));

            var endreResponse4List = new ArrayList<EndreResponse4>();
            for (var itEndre4Result : itEndreResponse3Result.getEndre4()) {
                var endreResponse4 = new EndreResponse4();
                endreResponse4.setId(itEndre4Result.getId4());
                endreResponse4.setPost(endreResponse4Post.get(endreResponse4.getId()));
                endreResponse4List.add(endreResponse4);
            }
            endreResponse3.setEndreResponse4(endreResponse4List);
            endreResponse3List.add(endreResponse3);
        }
        endreResponse.setEndreResponse3(endreResponse3List);

        return CompletableFuture.completedFuture(endreResponse);
    }

    private PersonProfil getEndreResponse2PersonProfil(
            DSLContext ctx, no.fellesstudentsystem.graphitron.services.TestPersonService.EndrePersonResponse2 idContainer,
            SelectionSet select) {
        if (!select.contains("endreResponse2/personProfil") || idContainer == null) {
            return null;
        }

        var nodes = personProfilDBQueries.loadPersonProfilByIdsAsNode(ctx, Set.of(idContainer.getPersonProfil().getId()), select.withPrefix("endreResponse2/personProfil"));
        return nodes.values().stream().findFirst().orElse(null);
    }

    private Map<String, PersonProfil> getEndreResponse3PersonProfil(
            DSLContext ctx, List<no.fellesstudentsystem.graphitron.services.TestPersonService.EndrePersonResponse3> idContainer,
            SelectionSet select) {
        if (!select.contains("endreResponse3/personProfil") || idContainer == null) {
            return Map.of();
        }

        var ids = idContainer.stream().map(it -> it.getPers3().getId()).collect(Collectors.toSet());
        return personProfilDBQueries.loadPersonProfilByIdsAsNode(ctx, ids, select.withPrefix("endreResponse3/personProfil"));
    }

    private Map<String, Postadresse> getEndreResponse4Post(
            DSLContext ctx, List<no.fellesstudentsystem.graphitron.services.TestPersonService.EndrePersonResponse4> idContainer,
            SelectionSet select) {
        if (!select.contains("endreResponse3/endreResponse4/post") || idContainer == null) {
            return Map.of();
        }

        var ids = idContainer.stream().map(it -> it.getPostAdr4().getId()).collect(Collectors.toSet());
        return postadresseDBQueries.loadPostadresseByIdsAsNode(ctx, ids, select.withPrefix("endreResponse3/endreResponse4/post"));
    }
}
