input EndreInputLevel1 @record(table : "PERSON") {
  id: ID!
  endreA1: EndreInputLevel2A!
  endreA2: EndreInputLevel2A @column(name : "endreDobbel")
  endreB: EndreInputLevel2B
  endreC1: EndreInputLevel2C!
  endreC2: [EndreInputLevel2C!]!
}

input EndreInputLevel2A @record(table : "PERSON") {
  fornavn: String
}

input EndreInputLevel2B @record(table : "PERSON") {
  fornavn: String
  endre3: [EndreInputLevel3!]
}

input EndreInputLevel2C {
  etternavn: String!
}

input EndreInputLevel3 @record(table : "PERSON") {
  privatEpost: String @column(name : "EMAILADRESSE_PRIVAT")
  endre4: [EndreInputLevel4!]
}

input EndreInputLevel4 @record(table : "PERSON") {
  etternavn: String!
}

type EndreResponse {
  id: ID!
  endreResponse2: EndreResponse2
  endreResponse3: [EndreResponse3!]
}

type EndreResponse2 {
  id: ID! @column(name : "id2")
  personProfil: PersonProfil
}

type EndreResponse3 {
  id: ID! @column(name : "id3")
  personProfil: PersonProfil @column(name : "pers3")
  endreResponse4: [EndreResponse4!] @column(name : "endre4")
}

type EndreResponse4 {
  id: ID! @column(name : "id4")
  post: Postadresse @column(name : "postAdr4")
}

type Mutation {
  endrePersonNested(input: EndreInputLevel1!): EndreResponse! @service(name : "TEST_PERSON")
}

type PersonProfil implements Node @table(name : "PERSON") {
  id: ID!
  fornavn: String!
  etternavn: String!
  privatEpost: String @column(name : "EMAILADRESSE_PRIVAT")
  postadresse: Postadresse @splitQuery @notGenerated
  dod: Boolean @column(name : "STATUS_DOD")
}

type Postadresse implements Node @table(name : "STUDENT") {
  id: ID!
  co: String @column(name : "ADRLIN1_SEMADR")
  gate: String @column(name : "ADRLIN2_SEMADR")
  postnummerOgSted: String @column(name : "ADRLIN3_SEMADR")
  land: String @column(name : "ADRESSELAND_SEMADR")
}
