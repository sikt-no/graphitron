input EditInput @table(name : "CUSTOMER") {
  id: ID!
  firstName: String @field(name : "FIRST_NAME")
  email: String
}

type Response {
  results: Result
}

type ListedResponse {
  results: [Result]
}

type ListedNodeResponse {
  customers: [Customer] @field(name : "customField")
}

type Result {
  id: ID!
  customer: Customer @field(name : "customField")
}

type Mutation {
  editCustomerWithCustomer(input: EditInput!): Response! @mutation(typeName: UPDATE)
  editCustomerWithCustomer2(input: EditInput!): Result! @mutation(typeName: UPDATE)
  deleteCustomerWithCustomer(input: EditInput!): Response! @mutation(typeName: DELETE)
  editCustomerWithCustomerIterable(input: [EditInput]!): ListedResponse! @mutation(typeName: UPDATE)
  editCustomerWithCustomerIterable2(input: [EditInput]!): ListedNodeResponse! @mutation(typeName: UPDATE)
  deleteCustomerWithCustomerIterable(input: [EditInput]!): ListedResponse! @mutation(typeName: DELETE)
}

type Customer implements Node @table {
  id: ID!
  firstName: String! @field(name: "FIRST_NAME")
  lastName: String! @field(name: "LAST_NAME")
  email: String
}
