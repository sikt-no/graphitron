input EditInputLevel1 @record(record: {name: "TEST_FILM_RECORD"}) {
  rating1: RatingNoConverter! @field(name: "ratingNoConverter")
  rating2: Rating! @field(name: "ratingWithConverter")

  edit2: EditInputLevel2 # TODO: If EditInputLevel2 should happen to have a field with this name, we get a name conflict.
}

input EditInputLevel2 {
  rating1: RatingNoConverter! @field(name: "ratingNoConverter")
  rating2: Rating! @field(name: "ratingWithConverter")
}

type Mutation {
  editFilm(input: EditInputLevel1!): Film! @service(service: {name: "TEST_FILM"})
}

type Film implements Node @table {
  id: ID!
}

enum RatingNoConverter { G, PG, R, } # No jOOQ converter.

enum Rating @enum(enumReference: {name: "RATING_TEST"}) { G, PG, R, } # With jOOQ converter.