package fake.code.example.package.resolvers.mutation;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;
import javax.inject.Inject;
import fake.graphql.example.package.api.EndrePersonWithProfilResponseMutationResolver;
import fake.graphql.example.package.model.EndreInput;
import fake.graphql.example.package.model.EndreResponseWithPerson;
import fake.graphql.example.package.model.PersonProfil;
import no.fellesstudentsystem.graphql.helpers.arguments.Arguments;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSet;
import fake.code.example.package.queries.mutation.EndrePersonWithProfilResponseDBQueries;
import fake.code.example.package.queries.query.PersonProfilDBQueries;
import no.fellesstudentsystem.kjerneapi.FieldHelpers;
import no.fellesstudentsystem.kjerneapi.tables.records.PersonRecord;
import org.jooq.DSLContext;

public class EndrePersonWithProfilResponseGeneratedResolver implements EndrePersonWithProfilResponseMutationResolver {
    @Inject
    DSLContext ctx;

    @Inject
    private EndrePersonWithProfilResponseDBQueries endrePersonWithProfilResponseDBQueries;

    @Inject
    private PersonProfilDBQueries personProfilDBQueries;

    @Override
    public CompletableFuture<List<EndreResponseWithPerson>> endrePersonWithProfilResponse(
            List<EndreInput> input, DataFetchingEnvironment env) throws Exception {
        var select = new SelectionSet(env.getSelectionSet());
        var flatArguments = Arguments.flattenArgumentKeys(env.getArguments());

        var inputRecordList = new ArrayList<PersonRecord>();


        if (input != null) {
            for (var itInput : input) {
                if (itInput == null) continue;
                var inputRecord = new PersonRecord();
                inputRecord.attach(ctx.configuration());
                if (flatArguments.contains("input/privatEpost")) {
                    inputRecord.setEmailadressePrivat(itInput.getPrivatEpost());
                }
                if (flatArguments.contains("input/id")) {
                    inputRecord.setId(itInput.getId());
                }
                if (flatArguments.contains("input/fornavn")) {
                    inputRecord.setFornavn(itInput.getFornavn());
                }
                inputRecordList.add(inputRecord);
            }
        }
        FieldHelpers.setPersonKeysFromPlattformIds(ctx, inputRecordList);

        var rowsUpdated = endrePersonWithProfilResponseDBQueries.endrePersonWithProfilResponse(inputRecordList);
        var inputRecordPersonProfil = getEndreResponseWithPersonPersonProfil(inputRecordList, select);

        var endreResponseWithPersonList = new ArrayList<EndreResponseWithPerson>();
        for (var itInputRecordList : inputRecordList) {
            var endreResponseWithPerson = new EndreResponseWithPerson();
            endreResponseWithPerson.setPersonProfil(inputRecordPersonProfil.get(itInputRecordList.getId()));
            endreResponseWithPersonList.add(endreResponseWithPerson);
        }

        return CompletableFuture.completedFuture(endreResponseWithPersonList);
    }

    private Map<String, PersonProfil> getEndreResponseWithPersonPersonProfil(
            List<PersonRecord> idContainer, SelectionSet select) {
        if (!select.contains("personProfil") || idContainer == null) {
            return Map.of();
        }

        var ids = idContainer.stream().map(it -> it.getId()).collect(Collectors.toSet());
        return personProfilDBQueries.loadPersonProfilByIdsAsNode(ids, select.withPrefix("personProfil"));
    }
}
