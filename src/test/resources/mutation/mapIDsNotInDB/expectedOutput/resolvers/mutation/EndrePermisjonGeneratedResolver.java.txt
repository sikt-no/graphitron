package fake.code.example.package.resolvers.mutation;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Override;
import java.util.concurrent.CompletableFuture;
import javax.inject.Inject;
import no.fellesstudentsystem.graphitron.services.TestPermisjonService;
import fake.graphql.example.package.api.EndrePermisjonMutationResolver;
import fake.graphql.example.package.model.EndreInput;
import fake.graphql.example.package.model.EndreResponse;
import no.fellesstudentsystem.graphql.helpers.arguments.Arguments;
import no.fellesstudentsystem.kjerneapi.FieldHelpers;
import no.fellesstudentsystem.kjerneapi.tables.records.PermisjonRecord;
import org.jooq.DSLContext;

public class EndrePermisjonGeneratedResolver implements EndrePermisjonMutationResolver {
    @Inject
    DSLContext ctx;

    @Override
    public CompletableFuture<EndreResponse> endrePermisjon(EndreInput in,
            DataFetchingEnvironment env) throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var testPermisjonService = new TestPermisjonService(ctx);
        var flatArguments = Arguments.flattenArgumentKeys(env.getArguments());

        var inRecord = new PermisjonRecord();
        inRecord.attach(ctx.configuration());

        if (in != null) {
            if (flatArguments.contains("in/id")) {
                inRecord.setId(in.getId());
            }
            if (flatArguments.contains("in/studentId")) {
                inRecord.setStudentId(in.getStudentId());
            }
            FieldHelpers.setPersonKeysFromPlattformIds(ctx, inRecord);
        }

        var endrePermisjonResult = testPermisjonService.endrePermisjon(inRecord);


        var endreResponse = new EndreResponse();
        endreResponse.setId(endrePermisjonResult.getId());
        endreResponse.setStudentId(endrePermisjonResult.getStudentId());

        return CompletableFuture.completedFuture(endreResponse);
    }
}
