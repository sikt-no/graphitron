package fake.code.example.package.resolvers.mutation;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Override;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import javax.inject.Inject;
import fake.graphql.example.package.api.EndrePersonMutationResolver;
import fake.graphql.example.package.model.Kjonn;
import fake.graphql.example.package.model.PersonInput;
import fake.graphql.example.package.model.Response;
import fake.code.example.package.queries.mutation.EndrePersonDBQueries;
import no.fellesstudentsystem.graphitron.enums.KjonnTest;
import no.fellesstudentsystem.graphql.helpers.arguments.Arguments;
import no.fellesstudentsystem.kjerneapi.FieldHelpers;
import no.fellesstudentsystem.kjerneapi.tables.records.PersonRecord;
import org.jooq.DSLContext;

public class EndrePersonGeneratedResolver implements EndrePersonMutationResolver {
    @Inject
    DSLContext ctx;

    @Inject
    private EndrePersonDBQueries endrePersonDBQueries;

    @Override
    public CompletableFuture<Response> endrePerson(PersonInput input, DataFetchingEnvironment env)
            throws Exception {
        var flatArguments = Arguments.flattenArgumentKeys(env.getArguments());

        var inputRecord = new PersonRecord();
        inputRecord.attach(ctx.configuration());

        if (input != null) {
            if (flatArguments.contains("input/id")) {
                inputRecord.setId(input.getId());
            }
            if (flatArguments.contains("input/kjonn")) {
                inputRecord.setKjonn(input.getKjonn() == null ? null : Map.of(Kjonn.MANN, KjonnTest.MANN, Kjonn.KVINNE, KjonnTest.KVINNE).getOrDefault(input.getKjonn(), null));
            }
            FieldHelpers.setPersonKeysFromPlattformIds(ctx, inputRecord);
        }

        var rowsUpdated = endrePersonDBQueries.endrePerson(inputRecord);

        var response = new Response();
        response.setId(inputRecord.getId());

        return CompletableFuture.completedFuture(response);
    }
}
