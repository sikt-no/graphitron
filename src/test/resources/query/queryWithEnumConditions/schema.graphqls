type Query {
  paramCondition(
    rating: Rating!  @condition(name: "TEST_FILM_RATING"),
    releaseYear: String! @column(name: "RELEASE_YEAR")
  ): [Film]

  paramConditionOverride(
    rating: Rating! @condition(name: "TEST_FILM_RATING", override: true),
    releaseYear: String! @column(name: "RELEASE_YEAR")
  ): [Film]

  fieldCondition(
    rating: Rating!,
    releaseYear: String! @column(name: "RELEASE_YEAR")
  ): [Film] @condition(name: "TEST_FILM_RATING_ALL")

  fieldConditionOverride(
    rating: Rating!,
    releaseYear: String! @column(name: "RELEASE_YEAR")
  ): [Film] @condition(name: "TEST_FILM_RATING_ALL", override: true)

  fieldAndParamCondition(
    rating: Rating! @condition(name: "TEST_FILM_RATING"),
    releaseYear: String! @column(name: "RELEASE_YEAR")
  ): [Film] @condition(name: "TEST_FILM_RATING_ALL")

  fieldAndParamConditionOverride(
    rating: Rating! @condition(name: "TEST_FILM_RATING"),
    releaseYear: String! @column(name: "RELEASE_YEAR")
  ): [Film] @condition(name: "TEST_FILM_RATING_ALL", override: true)

  fieldAndParamConditionOverrideBoth(
    rating: Rating! @condition(name: "TEST_FILM_RATING", override: true),
    releaseYear: String! @column(name: "RELEASE_YEAR")
  ): [Film] @condition(name: "TEST_FILM_RATING_ALL", override: true)

  fieldInputCondition(
    ratingIn: FilmInput, # Potentially support: @condition(name: "TEST_FILM_RATING_INPUT")
    releaseYear: String! @column(name: "RELEASE_YEAR")
  ): [Film] @condition(name: "TEST_FILM_RATING_INPUT_ALL")
}

input FilmInput {
  releaseYear: String! @column(name: "RELEASE_YEAR")
  rating: Rating!
}

type Film @table {
  id: ID!
  rating: Rating! 
}

enum Rating {
  G @column(name: "G"),
  PG_13 @column(name: "PG-13"),
  R @column(name: "R"),
}
