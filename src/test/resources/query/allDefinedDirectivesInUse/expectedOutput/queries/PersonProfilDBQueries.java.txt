package no.fellesstudentsystem.graphql.queries.query;

import static no.fellesstudentsystem.kjerneapi.FieldHelpers.*;
import static no.fellesstudentsystem.kjerneapi.Keys.*;
import static no.fellesstudentsystem.kjerneapi.Tables.*;
import static org.jooq.Functions.*;
import static org.jooq.impl.DSL.*;

import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import no.fellesstudentsystem.graphql.generated.model.Kull;
import no.fellesstudentsystem.graphql.generated.model.ProgramStudierett;
import no.fellesstudentsystem.graphql.generated.model.Telefon;
import no.fellesstudentsystem.graphql.generated.model.Termin;
import no.fellesstudentsystem.graphql.generated.model.Termintype;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSet;
import org.jooq.DSLContext;
import org.jooq.Record2;

public class PersonProfilDBQueries {
    @Inject
    DSLContext ctx;

    public Map<String, Telefon> mobilTelefonForPersonProfil(Set<String> personProfilIder,
            SelectionSet select) {
        var person_mobiltelefon = PERSON_TELEFON.as("person_mobiltelefon");
        return ctx
                .select(
                        PERSON.getId(),
                        row(
                                person_mobiltelefon.getId().as("id"),
                                select.optional("landnummer", person_mobiltelefon.LANDKODE).as("landnummer"),
                                select.optional("nummer", person_mobiltelefon.TELEFONNR).as("nummer")
                        ).mapping(nullOnAllNull(Telefon::new)).as("mobilTelefon")
                )
                .from(PERSON)
                .leftJoin(person_mobiltelefon)
                .on(no.fellesstudentsystem.kjerneapi.conditions.PersonTelefonConditions.personTelefonMobil(PERSON, person_mobiltelefon))
                .where(PERSON.hasIds(personProfilIder))
                .fetchMap(Record2::value1, Record2::value2);
    }

    public Map<String, List<ProgramStudierett>> studieretterForPersonProfil(
            Set<String> personProfilIder, SelectionSet select) {
        return ctx
                .select(
                        STUDIERETT.getPersonId(),
                        row(
                                STUDIERETT.getId().as("id"),
                                row(
                                        STUDIERETT.kull().getId().as("id"),
                                        select.optional("kull/navn", STUDIERETT.kull().STUDIEKULLNAVN).as("navn"),
                                        row(
                                                STUDIERETT.kull().termin().getId().as("id"),
                                                select.optional("kull/termin/termintype", STUDIERETT.kull().termin().TERMINKODE.convert(Termintype.class, s -> s == null ? null : Map.of("VÅR", Termintype.VAR, "HØST", Termintype.HOST).getOrDefault(s, null), s -> s == null ? null : Map.of(Termintype.VAR, "VÅR", Termintype.HOST, "HØST").getOrDefault(s, null))).as("termintype"),
                                                select.optional("kull/termin/arstall", STUDIERETT.kull().termin().ARSTALL).as("arstall")
                                        ).mapping(nullOnAllNull(Termin::new)).as("termin")
                                ).mapping(nullOnAllNull(Kull::new)).as("kull")
                        ).mapping(nullOnAllNull(ProgramStudierett::new)).as("studieretter")
                )
                .from(STUDIERETT)
                .where(STUDIERETT.hasPersonIds(personProfilIder))
                .fetchGroups(Record2::value1, Record2::value2);
    }
}
