package fake.code.example.package.resolvers.query;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import javax.inject.Inject;
import fake.graphql.example.package.api.QueryResolver;
import fake.graphql.example.package.model.PersonProfil;
import fake.graphql.example.package.model.StudentVedInstitusjon;
import no.fellesstudentsystem.graphql.helpers.EnvironmentUtils;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSet;
import fake.code.example.package.queries.query.QueryDBQueries;

public abstract class QueryGeneratedResolver implements QueryResolver {
    @Inject
    private QueryDBQueries queryDBQueries;

    @Override
    public CompletableFuture<List<PersonProfil>> personProfil(String eierInstitusjonsnummer,
            List<Integer> personlopenummer, DataFetchingEnvironment env) throws Exception {
        var selectionSet = new SelectionSet(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.personProfilForQuery(eierInstitusjonsnummer, personlopenummer, selectionSet);
        return CompletableFuture.completedFuture(dbResult);
    }

    @Override
    public CompletableFuture<List<StudentVedInstitusjon>> studenter(String eierInstitusjonsnummer,
            DataFetchingEnvironment env) throws Exception {
        var selectionSet = new SelectionSet(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.studenterForQuery(eierInstitusjonsnummer, selectionSet);
        return CompletableFuture.completedFuture(dbResult);
    }
}
