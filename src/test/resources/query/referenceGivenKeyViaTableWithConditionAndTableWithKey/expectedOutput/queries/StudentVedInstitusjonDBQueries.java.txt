package no.fellesstudentsystem.graphql.queries.query;

import static no.fellesstudentsystem.kjerneapi.FieldHelpers.*;
import static no.fellesstudentsystem.kjerneapi.Keys.*;
import static no.fellesstudentsystem.kjerneapi.Tables.*;
import static org.jooq.Functions.*;
import static org.jooq.impl.DSL.*;

import java.lang.String;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import no.fellesstudentsystem.graphql.generated.model.Landtype;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSet;
import org.jooq.DSLContext;
import org.jooq.Record2;

public class StudentVedInstitusjonDBQueries {
    @Inject
    DSLContext ctx;

    public Map<String, Landtype> institusjonslandtypeForStudentVedInstitusjon(
            Set<String> studentVedInstitusjonIder, SelectionSet select) {
        var student_institusjonslandtype = INSTITUSJON.as("student_institusjonslandtype");
        var student_institusjonslandtype_land = student_institusjonslandtype.land().as("student_institusjonslandtype_land");
        var student_institusjonslandtype_land_landtype = student_institusjonslandtype_land.landtype().as("student_institusjonslandtype_land_landtype");
        return ctx
                .select(
                        STUDENT.getId(),
                        row(
                                student_institusjonslandtype_land_landtype.getId().as("id"),
                                select.optional("navn", student_institusjonslandtype_land_landtype.LANDTYPENAVN).as("navn")
                        ).mapping(nullOnAllNull(Landtype::new)).as("institusjonslandtype")
                )
                .from(STUDENT)
                .join(student_institusjonslandtype)
                .on(no.fellesstudentsystem.kjerneapi.conditions.StudentConditions.studentEierinstitusjon(STUDENT, student_institusjonslandtype))
                .where(STUDENT.hasIds(studentVedInstitusjonIder))
                .fetchMap(Record2::value1, Record2::value2);
    }
}
