package no.fellesstudentsystem.graphql.queries.query;

import static no.fellesstudentsystem.kjerneapi.FieldHelpers.*;
import static no.fellesstudentsystem.kjerneapi.Keys.*;
import static no.fellesstudentsystem.kjerneapi.Tables.*;
import static org.jooq.Functions.*;
import static org.jooq.impl.DSL.*;

import java.lang.String;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import no.fellesstudentsystem.graphql.generated.model.Kull;
import no.fellesstudentsystem.graphql.generated.model.ProgramStudierett;
import no.fellesstudentsystem.graphql.generated.model.Studierettperiode;
import no.fellesstudentsystem.graphql.generated.model.Studierettstatus;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSets;
import org.jooq.DSLContext;
import org.jooq.Record2;

public class ProgramStudierettDBQueries {
    @Inject
    DSLContext ctx;

    public Map<String, Studierettstatus> studierettstatusForProgramStudierett(
            Set<String> programStudierettIder, SelectionSets select) {
        return ctx
                .select(
                        STUDIERETT.getId(),
                        row(
                                STUDIERETT.studierettstatus().getId().as("id")
                        ).mapping(nullOnAllNull(Studierettstatus::new)).as("studierettstatus")
                )
                .from(STUDIERETT)
                .where(STUDIERETT.hasIds(programStudierettIder))
                .fetchMap(Record2::value1, Record2::value2);
    }

    public Map<String, ProgramStudierett> loadProgramStudierettByIdsAsNode(Set<String> ids,
            SelectionSets select) {
        return ctx
                .select(
                        STUDIERETT.getId(),
                        row(
                                STUDIERETT.getId().as("id"),
                                row(
                                        STUDIERETT.kull().getId().as("id"),
                                        select.optional("kull/terminId", STUDIERETT.kull().TERMINKODE).as("terminId"),
                                        select.optional("kull/navn", STUDIERETT.kull().STUDIEKULLNAVN).as("navn")
                                ).mapping(nullOnAllNull(Kull::new)).as("kull"),
                                row(
                                        select.optional("studierettperiode/fraDato", STUDIERETT.DATO_STUDIERETT_TILDELT).as("fraDato"),
                                        select.optional("studierettperiode/tilDato", STUDIERETT.DATO_STUDIERETT_GYLDIG_TIL).as("tilDato")
                                ).mapping(Studierettperiode::new).as("studierettperiode")
                        ).mapping((a0, a1, a2) -> a0 == null && (a1 == null || new Kull().equals(a1)) && (a2 == null || new Studierettperiode().equals(a2)) ? null : new ProgramStudierett(a0, a1, a2)).as("id")
                )
                .from(STUDIERETT)
                .where(STUDIERETT.hasIds(ids))
                .fetchMap(Record2::value1, Record2::value2);
    }
}
