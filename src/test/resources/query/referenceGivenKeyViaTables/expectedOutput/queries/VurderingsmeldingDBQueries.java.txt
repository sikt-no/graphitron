package no.fellesstudentsystem.graphql.queries.query;

import static no.fellesstudentsystem.kjerneapi.FieldHelpers.*;
import static no.fellesstudentsystem.kjerneapi.Keys.*;
import static no.fellesstudentsystem.kjerneapi.Tables.*;
import static org.jooq.Functions.*;
import static org.jooq.impl.DSL.*;

import java.lang.String;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import no.fellesstudentsystem.graphql.generated.model.Termin;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSet;
import org.jooq.DSLContext;
import org.jooq.Record2;

public class VurderingsmeldingDBQueries {
    @Inject
    DSLContext ctx;

    public Map<String, Termin> forsteTerminForVurderingForVurderingsmelding(
            Set<String> vurderingsmeldingIder, SelectionSet select) {
        var vurderingsmelding_vurderingsenhet = VURDERINGSMELDING.vurderingsenhet().as("vurderingsmelding_vurderingsenhet");
        var vurderingsmelding_vurderingsenhet_vurderingskombinasjon = vurderingsmelding_vurderingsenhet.vurderingskombinasjon().as("vurderingsmelding_vurderingsenhet_vurderingskombinasjon");
        var vurderingsmelding_vurderingsenhet_vurderingskombinasjon_emne = vurderingsmelding_vurderingsenhet_vurderingskombinasjon.emne().as("vurderingsmelding_vurderingsenhet_vurderingskombinasjon_emne");
        var vurderingsmelding_vurderingsenhet_vurderingskombinasjon_emne_termin = vurderingsmelding_vurderingsenhet_vurderingskombinasjon_emne.emne_EksForste_Termin_Fk().as("vurderingsmelding_vurderingsenhet_vurderingskombinasjon_emne_termin");
        return ctx
                .select(
                        VURDERINGSMELDING.getId(),
                        row(
                                vurderingsmelding_vurderingsenhet_vurderingskombinasjon_emne_termin.getId().as("id"),
                                select.optional("arstall", vurderingsmelding_vurderingsenhet_vurderingskombinasjon_emne_termin.ARSTALL).as("arstall")
                        ).mapping(nullOnAllNull(Termin::new)).as("forsteTerminForVurdering")
                )
                .from(VURDERINGSMELDING)
                .where(VURDERINGSMELDING.hasIds(vurderingsmeldingIder))
                .fetchMap(Record2::value1, Record2::value2);
    }
}
