package fake.code.example.package.queries.query;

import static no.fellesstudentsystem.kjerneapi.FieldHelpers.*;
import static no.fellesstudentsystem.kjerneapi.Keys.*;
import static no.fellesstudentsystem.kjerneapi.Tables.*;
import static org.jooq.Functions.*;
import static org.jooq.impl.DSL.*;

import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import javax.inject.Inject;
import fake.graphql.example.package.model.Semesterregistrering;
import fake.graphql.example.package.model.SemesterregistreringBetaltInstitusjon;
import fake.graphql.example.package.model.SemesterregistreringBetaltInstitusjonNested;
import fake.graphql.example.package.model.SemesterregistreringBetaltInstitusjonWithOneField;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSet;
import org.jooq.DSLContext;
import org.jooq.Record2;

public class StudentVedInstitusjonDBQueries {
    @Inject
    DSLContext ctx;

    public Map<String, List<Semesterregistrering>> semesterregistreringerForStudentVedInstitusjon(
            Set<String> studentVedInstitusjonIder, SemesterregistreringBetaltInstitusjon terminIn,
            SelectionSet select) {
        return ctx
                .select(
                        SEMESTERREGISTRERING.getStudentId(),
                        row(
                                SEMESTERREGISTRERING.getId().as("id"),
                                select.optional("registrert", SEMESTERREGISTRERING.STATUS_REG_OK).as("registrert")
                        ).mapping(nullOnAllNull(Semesterregistrering::new)).as("semesterregistreringer")
                )
                .from(SEMESTERREGISTRERING)
                .where(SEMESTERREGISTRERING.hasStudentIds(studentVedInstitusjonIder))
                .and(SEMESTERREGISTRERING.semesterregistrering_BetalSted_Institusjon_Fk().INSTITUSJONSNR.eq(terminIn.getInstitusjonsnummer()))
                .and(SEMESTERREGISTRERING.semesterregistrering_BetalSted_Institusjon_Fk().NAVN.eq(terminIn.getNavn()))
                .fetchGroups(Record2::value1, Record2::value2);
    }

    public Map<String, List<Semesterregistrering>> registreringerForInputListForStudentVedInstitusjon(
            Set<String> studentVedInstitusjonIder,
            List<SemesterregistreringBetaltInstitusjon> terminInList, SelectionSet select) {
        return ctx
                .select(
                        SEMESTERREGISTRERING.getStudentId(),
                        row(
                                SEMESTERREGISTRERING.getId().as("id"),
                                select.optional("registrert", SEMESTERREGISTRERING.STATUS_REG_OK).as("registrert")
                        ).mapping(nullOnAllNull(Semesterregistrering::new)).as("registreringerForInputList")
                )
                .from(SEMESTERREGISTRERING)
                .where(SEMESTERREGISTRERING.hasStudentIds(studentVedInstitusjonIder))
                .and(terminInList != null && terminInList.size() > 0 ?
                        row(
                                SEMESTERREGISTRERING.semesterregistrering_BetalSted_Institusjon_Fk().INSTITUSJONSNR,
                                SEMESTERREGISTRERING.semesterregistrering_BetalSted_Institusjon_Fk().NAVN
                        ).in(terminInList.stream().map(input -> row(
                                input.getInstitusjonsnummer(),
                                input.getNavn())
                        ).collect(Collectors.toList())) :
                        noCondition())
                .fetchGroups(Record2::value1, Record2::value2);
    }

    public Map<String, List<Semesterregistrering>> registreringerForMixOfListAndSingleInputForStudentVedInstitusjon(
            Set<String> studentVedInstitusjonIder, SemesterregistreringBetaltInstitusjon terminIn,
            List<SemesterregistreringBetaltInstitusjon> terminInList, SelectionSet select) {
        return ctx
                .select(
                        SEMESTERREGISTRERING.getStudentId(),
                        row(
                                SEMESTERREGISTRERING.getId().as("id"),
                                select.optional("registrert", SEMESTERREGISTRERING.STATUS_REG_OK).as("registrert")
                        ).mapping(nullOnAllNull(Semesterregistrering::new)).as("registreringerForMixOfListAndSingleInput")
                )
                .from(SEMESTERREGISTRERING)
                .where(SEMESTERREGISTRERING.hasStudentIds(studentVedInstitusjonIder))
                .and(SEMESTERREGISTRERING.semesterregistrering_BetalSted_Institusjon_Fk().INSTITUSJONSNR.eq(terminIn.getInstitusjonsnummer()))
                .and(SEMESTERREGISTRERING.semesterregistrering_BetalSted_Institusjon_Fk().NAVN.eq(terminIn.getNavn()))
                .and(terminInList != null && terminInList.size() > 0 ?
                        row(
                                SEMESTERREGISTRERING.semesterregistrering_BetalSted_Institusjon_Fk().INSTITUSJONSNR,
                                SEMESTERREGISTRERING.semesterregistrering_BetalSted_Institusjon_Fk().NAVN
                        ).in(terminInList.stream().map(input -> row(
                                input.getInstitusjonsnummer(),
                                input.getNavn())
                        ).collect(Collectors.toList())) :
                        noCondition())
                .fetchGroups(Record2::value1, Record2::value2);
    }

    public Map<String, List<Semesterregistrering>> registreringerForInputWithOneFieldListForStudentVedInstitusjon(
            Set<String> studentVedInstitusjonIder,
            List<SemesterregistreringBetaltInstitusjonWithOneField> terminInListOneField,
            SelectionSet select) {
        return ctx
                .select(
                        SEMESTERREGISTRERING.getStudentId(),
                        row(
                                SEMESTERREGISTRERING.getId().as("id"),
                                select.optional("registrert", SEMESTERREGISTRERING.STATUS_REG_OK).as("registrert")
                        ).mapping(nullOnAllNull(Semesterregistrering::new)).as("registreringerForInputWithOneFieldList")
                )
                .from(SEMESTERREGISTRERING)
                .where(SEMESTERREGISTRERING.hasStudentIds(studentVedInstitusjonIder))
                .and(terminInListOneField != null && terminInListOneField.size() > 0 ?
                        row(
                                SEMESTERREGISTRERING.semesterregistrering_BetalSted_Institusjon_Fk().INSTITUSJONSNR
                        ).in(terminInListOneField.stream().map(input -> row(
                                input.getInstitusjonsnummer())
                        ).collect(Collectors.toList())) :
                        noCondition())
                .fetchGroups(Record2::value1, Record2::value2);
    }

    public Map<String, List<Semesterregistrering>> registreringerForInputWithNestedFieldListForStudentVedInstitusjon(
            Set<String> studentVedInstitusjonIder,
            List<SemesterregistreringBetaltInstitusjonNested> terminInListNestedField,
            SelectionSet select) {
        return ctx
                .select(
                        SEMESTERREGISTRERING.getStudentId(),
                        row(
                                SEMESTERREGISTRERING.getId().as("id"),
                                select.optional("registrert", SEMESTERREGISTRERING.STATUS_REG_OK).as("registrert")
                        ).mapping(nullOnAllNull(Semesterregistrering::new)).as("registreringerForInputWithNestedFieldList")
                )
                .from(SEMESTERREGISTRERING)
                .where(SEMESTERREGISTRERING.hasStudentIds(studentVedInstitusjonIder))
                .and(terminInListNestedField != null && terminInListNestedField.size() > 0 ?
                        row(
                                SEMESTERREGISTRERING.semesterregistrering_BetalSted_Institusjon_Fk().INSTITUSJONSNR,
                                SEMESTERREGISTRERING.semesterregistrering_BetalSted_Institusjon_Fk().NAVN
                        ).in(terminInListNestedField.stream().map(input -> row(
                                input.getInstitusjonsnummerField().getInstitusjonsnummer(),
                                input.getNavn())
                        ).collect(Collectors.toList())) :
                        noCondition())
                .fetchGroups(Record2::value1, Record2::value2);
    }
}
