type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

type PersonEpost {
  privatEpost: String @column(name : "EMAILADRESSE_PRIVAT")
  arbeidsEpost: String! @column(name : "EMAILADRESSE_ARBEID")
  institusjonsEpost: String @column(name : "EMAILADRESSE")
}

input PersonInput {
  fornavn: String
  "Optional"
  etternavn: String!
  "Mandatory"
  epost: PersonInputEpost
}

input PersonInputEpost {
  privatEpost: String @column(name : "EMAILADRESSE_PRIVAT")
  arbeidsEpost: String! @column(name : "EMAILADRESSE_ARBEID")
}

type PersonProfil implements Node @table(name : "PERSON") {
  id: ID!
  fornavn: String!
  etternavn: String!
  epost: PersonEpost
}

type PersonProfilConnection {
  edges: [PersonProfilConnectionEdge]
  pageInfo: PageInfo
  nodes: [PersonProfil!]!
}

type PersonProfilConnectionEdge {
  cursor: String
  node: PersonProfil
}

type Query {
  personNoPage(eierInstitusjonsnummer: String! @column(name : "INSTITUSJONSNR_EIER"), personlopenummer: [Int!] @column(name : "PERSONLOPENR"), pin: PersonInput): PersonProfil
  personWithPage(eierInstitusjonsnummer: String! @column(name : "INSTITUSJONSNR_EIER"), personlopenummer: [Int!] @column(name : "PERSONLOPENR"), pin: PersonInput, first: Int = 100, after: String): PersonProfilConnection!
  studenter(eierInstitusjonsnummer: String! @column(name : "INSTITUSJONSNR_EIER"), first: Int = 100, after: String): QueryStudentVedInstitusjonConnection
}

type QueryStudentVedInstitusjonConnection {
  edges: [QueryStudentVedInstitusjonConnectionEdge]
  pageInfo: PageInfo
  nodes: [StudentVedInstitusjon!]!
}

type QueryStudentVedInstitusjonConnectionEdge {
  cursor: String
  node: StudentVedInstitusjon
}

type Semesterregistrering implements Node @table {
  id: ID!
  registrert: Boolean! @column(name : "STATUS_REG_OK")
}

input SemesterregistreringBetaltInstitusjon {
  institusjonsnummer: Int! @column(name : "INSTITUSJONSNR", table : "INSTITUSJON", key : "SEMESTERREGISTRERING__BETAL_STED__INSTITUSJON__FK")
  navn: Institusjonsnavn! @column(name : "NAVN", table : "INSTITUSJON", key : "SEMESTERREGISTRERING__BETAL_STED__INSTITUSJON__FK") # Note: was testing an enum before. This is now lost.
}

input SemesterregistreringBetaltInstitusjonWithOneField {
  institusjonsnummer: Int! @column(name : "INSTITUSJONSNR", table : "INSTITUSJON", key : "SEMESTERREGISTRERING__BETAL_STED__INSTITUSJON__FK")
}

input SemesterregistreringBetaltInstitusjonNested {
  institusjonsnummerField: SemesterregistreringBetaltInstitusjonWithOneField!
  navn: Institusjonsnavn! @column(name : "NAVN", table : "INSTITUSJON", key : "SEMESTERREGISTRERING__BETAL_STED__INSTITUSJON__FK")
}

type StudentVedInstitusjon implements Node @table(name : "STUDENT") {
  id: ID!
  semesterregistreringer(terminIn: SemesterregistreringBetaltInstitusjon!): [Semesterregistrering!]! @splitQuery
  registreringerForInputList(terminInList: [SemesterregistreringBetaltInstitusjon!]): [Semesterregistrering!]! @splitQuery
  registreringerForMixOfListAndSingleInput(terminIn: SemesterregistreringBetaltInstitusjon!, terminInList: [SemesterregistreringBetaltInstitusjon!]): [Semesterregistrering!]! @splitQuery
  registreringerForInputWithOneFieldList(terminInListOneField: [SemesterregistreringBetaltInstitusjonWithOneField!]): [Semesterregistrering!]! @splitQuery
  registreringerForInputWithNestedFieldList(terminInListNestedField: [SemesterregistreringBetaltInstitusjonNested!]): [Semesterregistrering!]! @splitQuery
}

type Institusjonsnavn {
  eng: String @column(name: "INSTITUSJONSNAVN_ENGELSK")
  nob: String! @column(name: "INSTITUSJONSNAVN_BOKMAL")
  nno: String @column(name: "INSTITUSJONSNAVN_NYNORSK")
  sme: String @column(name: "INSTITUSJONSNAVN_SAMISK")
}
