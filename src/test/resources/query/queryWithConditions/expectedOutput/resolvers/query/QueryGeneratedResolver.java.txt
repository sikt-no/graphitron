package fake.code.example.package.resolvers.query;

import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import javax.inject.Inject;
import fake.graphql.example.package.api.QueryResolver;
import fake.graphql.example.package.model.Emne;
import fake.graphql.example.package.model.EmneInput;
import no.fellesstudentsystem.graphql.helpers.EnvironmentUtils;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSet;
import fake.code.example.package.queries.query.QueryDBQueries;
import org.jooq.DSLContext;

public class QueryGeneratedResolver implements QueryResolver {
    @Inject
    DSLContext ctx;

    @Inject
    private QueryDBQueries queryDBQueries;

    @Override
    public CompletableFuture<List<Emne>> paramCondition(String eierInstitusjonsnummer,
            List<String> emnekoder, DataFetchingEnvironment env) throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var selectionSet = new SelectionSet(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.paramConditionForQuery(ctx, eierInstitusjonsnummer, emnekoder, selectionSet);
        return CompletableFuture.completedFuture(dbResult);
    }

    @Override
    public CompletableFuture<List<Emne>> paramConditionOverride(String eierInstitusjonsnummer,
            List<String> emnekoder, DataFetchingEnvironment env) throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var selectionSet = new SelectionSet(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.paramConditionOverrideForQuery(ctx, eierInstitusjonsnummer, emnekoder, selectionSet);
        return CompletableFuture.completedFuture(dbResult);
    }

    @Override
    public CompletableFuture<List<Emne>> fieldCondition(String eierInstitusjonsnummer,
            List<String> emnekoder, DataFetchingEnvironment env) throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var selectionSet = new SelectionSet(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.fieldConditionForQuery(ctx, eierInstitusjonsnummer, emnekoder, selectionSet);
        return CompletableFuture.completedFuture(dbResult);
    }

    @Override
    public CompletableFuture<List<Emne>> fieldConditionOverride(String eierInstitusjonsnummer,
            List<String> emnekoder, DataFetchingEnvironment env) throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var selectionSet = new SelectionSet(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.fieldConditionOverrideForQuery(ctx, eierInstitusjonsnummer, emnekoder, selectionSet);
        return CompletableFuture.completedFuture(dbResult);
    }

    @Override
    public CompletableFuture<List<Emne>> fieldAndParamCondition(String eierInstitusjonsnummer,
            List<String> emnekoder, DataFetchingEnvironment env) throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var selectionSet = new SelectionSet(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.fieldAndParamConditionForQuery(ctx, eierInstitusjonsnummer, emnekoder, selectionSet);
        return CompletableFuture.completedFuture(dbResult);
    }

    @Override
    public CompletableFuture<List<Emne>> fieldAndParamConditionOverride(
            String eierInstitusjonsnummer, List<String> emnekoder, DataFetchingEnvironment env)
            throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var selectionSet = new SelectionSet(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.fieldAndParamConditionOverrideForQuery(ctx, eierInstitusjonsnummer, emnekoder, selectionSet);
        return CompletableFuture.completedFuture(dbResult);
    }

    @Override
    public CompletableFuture<List<Emne>> fieldAndParamConditionOverrideBoth(
            String eierInstitusjonsnummer, List<String> emnekoder, DataFetchingEnvironment env)
            throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var selectionSet = new SelectionSet(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.fieldAndParamConditionOverrideBothForQuery(ctx, eierInstitusjonsnummer, emnekoder, selectionSet);
        return CompletableFuture.completedFuture(dbResult);
    }

    @Override
    public CompletableFuture<List<Emne>> fieldInputCondition(String eierInstitusjonsnummer,
            EmneInput emneInput, DataFetchingEnvironment env) throws Exception {
        var ctx = env.getLocalContext() == null ? this.ctx : (DSLContext) env.getLocalContext();
        var selectionSet = new SelectionSet(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.fieldInputConditionForQuery(ctx, eierInstitusjonsnummer, emneInput, selectionSet);
        return CompletableFuture.completedFuture(dbResult);
    }
}
