package no.fellesstudentsystem.graphql.queries.query;

import static no.fellesstudentsystem.kjerneapi.FieldHelpers.*;
import static no.fellesstudentsystem.kjerneapi.Keys.*;
import static no.fellesstudentsystem.kjerneapi.Tables.*;
import static org.jooq.Functions.*;
import static org.jooq.impl.DSL.*;

import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import no.fellesstudentsystem.graphql.generated.model.Campusemne;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSets;
import org.jooq.DSLContext;
import org.jooq.Record2;

public class EmneDBQueries {
    @Inject
    DSLContext ctx;

    public Map<String, List<Campusemne>> campuserForEmne(Set<String> emneIder,
            SelectionSets select) {
        var emne_campuser = CAMPUS_EMNE.as("emne_campuser");
        return ctx
                .select(
                        EMNE.getId(),
                        row(
                                emne_campuser.getId().as("id")
                        ).mapping(nullOnAllNull(Campusemne::new)).as("campuser")
                )
                .from(EMNE)
                .join(emne_campuser)
                .onKey(CAMPUS_EMNE__HAR__EMNE__FK)
                .where(EMNE.hasIds(emneIder))
                .fetchGroups(Record2::value1, Record2::value2);
    }
}