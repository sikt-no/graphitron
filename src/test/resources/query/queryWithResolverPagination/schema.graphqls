interface Node {
  id: ID!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pass implements Node @table(name : "PASS") {
  id: ID!
  passnummer: String! @column(name : "NUMMER")
}

type PassConnection {
  edges: [PassConnectionEdge]
  pageInfo: PageInfo
  nodes: [Pass!]!
}

type PassConnectionEdge {
  cursor: String
  node: Pass
}

type PersonProfil implements Node @table(name : "PERSON") {
  id: ID!
  pass(first: Int = 10, after: String): PassConnection @splitQuery
  fornavn: String!
}

type PersonProfilConnection {
  edges: [PersonProfilConnectionEdge]
  pageInfo: PageInfo
  nodes: [PersonProfil!]!
}

type PersonProfilConnectionEdge {
  cursor: String
  node: PersonProfil
}

type Query {
  person(eierInstitusjonsnummer: String! @column(name : "INSTITUSJONSNR_EIER"), first: Int = 100, after: String): PersonProfilConnection
  person2(eierInstitusjonsnummer: String! @column(name : "INSTITUSJONSNR_EIER")): [PersonProfil]
}
