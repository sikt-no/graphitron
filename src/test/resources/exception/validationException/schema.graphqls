input EditInput @table(name : "CUSTOMER") {
  id: ID!
  firstName: String @field(name : "FIRST_NAME")
}

type EditCustomerWithValidationErrorPayload {
  customers: [Customer!]
  errors: [MyValidationError!]
}

type EditCustomerWithUnionErrorPayload {
  customers: [Customer!]
  errors: [UnionOfErrors!]
}

type EditCustomerWithMultipleErrorPayloads {
  customers: [Customer!]
  errors1: [MyValidationError!]
  errors2: [UnionOfErrors!]
}


type EditCustomerWithOtherErrorPayload {
  customers: [Customer!]
  errors: [OtherError!]
}

type Mutation {
  editCustomerWithValidationError(input: [EditInput!]!): EditCustomerWithValidationErrorPayload! @mutation(typeName: UPDATE)
  editCustomerWithUnionError(input: [EditInput!]!): EditCustomerWithUnionErrorPayload! @mutation(typeName: UPDATE)
  editCustomerWithMultipleErrors(input: [EditInput!]!): EditCustomerWithMultipleErrorPayloads! @mutation(typeName: UPDATE)
  editCustomerWithOtherError(input: [EditInput!]!): EditCustomerWithOtherErrorPayload! @mutation(typeName: UPDATE)
}

type Customer implements Node @table {
  id: ID!
  firstName: String! @field(name: "FIRST_NAME")
}

type MyValidationError implements Error {
  path: [String!]!
  message: String!
}

type OtherError implements Error {
  path: [String!]!
  message: String!
}

union UnionOfErrors = OtherError | MyValidationError