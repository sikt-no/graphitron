type Adresse {
  gate: String @column(name : "ADRLIN2_HJEMSTED")
}

union AllErrors = ErrorType1 | ErrorType2

interface Error {
  message: String!
  path: [String!]!
}

type ErrorType1 implements Error {
  message: String!
  path: [String!]!
}

type ErrorType2 implements Error {
  message: String!
  path: [String!]!
}

type Kull implements Node @node {
  "Unik identifikator for kullet"
  id: ID!
  "Navn på kullet."
  navn: String! @column(name : "STUDIEKULLNAVN")
  "Oppstartstermin for kullet"
  termin: Termin!
}

enum Maalform {
  NOB
  NNO
  ENG
}

interface Node {
  id: ID!
}

type Permisjon implements Node @node {
  "Unik identifikator for permisjonen"
  id: ID!
  "Studentens studieretter på studieprogrammet permisjonen gjelder for"
  programStudieretter: [ProgramStudierett!]! @resolver @reference(condition : "PERMISJON_STUDIERETT")
  "Perioden studenten skal ha permisjon"
  permisjonsperiode: Permisjonsperiode!
}

"Periode for permisjonen"
type Permisjonsperiode {
  "Dato permisjonen starter"
  fra: Date! @column(name : "DATO_FRA")
  "Dato permisjonen slutter"
  til: Date! @column(name : "DATO_TIL")
}

type PersonProfil implements Node @node(table : "PERSON") {
  "Unik identifikator for personprofilen"
  id: ID!
  "Personens fornavn"
  fornavn: String!
  "Personens etternavn"
  etternavn: String!
  "Privat e-postadresse"
  privatEpost: String @column(name : "EMAILADRESSE_PRIVAT")
  "Arbeids-epostadresse for personer som ikke er ansatt ved institusjonen"
  arbeidsEpost: String @column(name : "EMAILADRESSE_ARBEID")
  "Epostadresse personen er blitt tildelt ved denne institusjonen (student- eller arbeids-epost)"
  institusjonsEpost: String @column(name : "EMAILADRESSE")
  "Mobiltelefonnummer"
  mobilTelefon: Telefon @resolver @reference(condition : "PERSON_TELEFON_MOBIL")
  "Privat telefonnummer"
  privatTelefon: Telefon @resolver @reference(condition : "PERSON_TELEFON_PRIVAT")
  "Personens folkeregistrerte adresse"
  folkeregistrertAdresse: Adresse
  "Personens fødselsdato"
  fodselsdato: Date! @column(name : "DATO_FODT")
  "Personens 11-sifrede fødselsnummer"
  fodselsnummer: String! @column(name : "FODSELSNR")
  "Personens morsmål. Returnerer en ISO-639-2-kode"
  morsmaal: String @column(name : "SPRAKKODE_MORSMAL")
  "Målform eller språk som personen ønsker å kontaktes på. Returnerer en [ISO-639-2](https://www.loc.gov/standards/iso639-2/php/code_list.php)-kode"
  maalform: Maalform @column(name : "SPRAKKODE_639_2", table : "SPRAK", key : "PERSON__MALFORM__SPRAK__FK")
  "Studierettene en person har hatt gjennom livsløpet"
  studieretter: [ProgramStudierett!]! @resolver
}

type ProgramStudierett implements Node @node(table : "STUDIERETT") {
  "Unik identifikator for studieretten"
  id: ID!
  "Personen som innehar studieretten"
  personProfil: PersonProfil! @resolver
  "Kullet studenten inngår i"
  kull: Kull!
}

type Query {
  personProfil(eierInstitusjonsnummer: String! @column(name : "INSTITUSJONSNR_EIER"), personlopenummer: [Int!] @column(name : "PERSONLOPENR")): PersonProfil
  studenter(eierInstitusjonsnummer: String! @column(name : "INSTITUSJONSNR_EIER")): StudentVedInstitusjon
  "@generated not supported for interfaces yet"
  node(id: ID!): Node @notGenerated
  "@generated not supported for unions yet"
  errors: [AllErrors!] @notGenerated
}

type StudentVedInstitusjon implements Node @node(table : "STUDENT") {
  id: ID!
  studentnummer: String! @column(name : "STUDENTNR_TILDELT")
  permisjoner: [Permisjon!]! @resolver
}

"Telefonnummer med landnummer"
type Telefon implements Node @node(table : "PERSON_TELEFON") {
  id: ID!
  "1-3-sifret landnummer for telefonnummret, med plusstegn foran"
  landnummer: String @column(name : "LANDKODE")
  "Selve telefonnummeret"
  nummer: String! @column(name : "TELEFONNR")
}

type Termin implements Node @node {
  "Unik identifikator for terminen."
  id: ID!
  termintype: Termintype! @column(name : "TERMINKODE")
  "Årstall for terminen."
  arstall: Int!
}

enum Termintype {
  "Vår"
  VAR @mapEnum(name : "VÅR")
  "Sommer"
  SOM @mapEnum(name : "SOM")
  "Høst"
  HOST @mapEnum(name : "HØST")
}
