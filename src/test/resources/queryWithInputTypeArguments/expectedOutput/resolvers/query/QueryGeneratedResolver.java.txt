package no.fellesstudentsystem.graphql.resolvers.query;

import graphql.relay.DefaultConnectionCursor;
import graphql.relay.DefaultEdge;
import graphql.relay.DefaultPageInfo;
import graphql.schema.DataFetchingEnvironment;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Math;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;
import javax.inject.Inject;
import no.fellesstudentsystem.graphql.generated.api.QueryResolver;
import no.fellesstudentsystem.graphql.generated.model.PersonInput;
import no.fellesstudentsystem.graphql.generated.model.PersonProfil;
import no.fellesstudentsystem.graphql.generated.model.StudentVedInstitusjon;
import no.fellesstudentsystem.graphql.helpers.EnvironmentUtils;
import no.fellesstudentsystem.graphql.helpers.selection.ConnectionSelectionSets;
import no.fellesstudentsystem.graphql.helpers.selection.SelectionSets;
import no.fellesstudentsystem.graphql.queries.QueryDBQueries;
import no.fellesstudentsystem.graphql.relay.ConnectionImpl;
import no.fellesstudentsystem.graphql.relay.ExtendedConnection;

public class QueryGeneratedResolver implements QueryResolver {
    @Inject
    private QueryDBQueries queryDBQueries;

    @Override
    public CompletableFuture<List<PersonProfil>> personNoPage(String eierInstitusjonsnummer,
            List<Integer> personlopenummer, PersonInput pin, DataFetchingEnvironment env) throws
            Exception {
        var selectionSet = new SelectionSets(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.personNoPageForQuery(eierInstitusjonsnummer, personlopenummer, pin, selectionSet);
        return CompletableFuture.completedFuture(dbResult);
    }

    @Override
    public CompletableFuture<ExtendedConnection<PersonProfil>> personWithPage(
            String eierInstitusjonsnummer, List<Integer> personlopenummer, PersonInput pin,
            Integer first, String after, DataFetchingEnvironment env) throws Exception {
        int pageSize = Optional.ofNullable(first).orElse(10);
        var selectionSet = new ConnectionSelectionSets(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.personWithPageForQuery(eierInstitusjonsnummer, personlopenummer, pin, pageSize, after, selectionSet);
        var totalCount = selectionSet.contains("totalCount") ?  queryDBQueries.countPersonWithPageForQuery(eierInstitusjonsnummer, personlopenummer, pin) : null;
        var size = Math.min(dbResult.size(), pageSize);
        var items = dbResult.subList(0, size);
        var firstItem = items.size() == 0 ? null : new DefaultConnectionCursor(items.get(0).getId());
        var lastItem = items.size() == 0 ? null : new DefaultConnectionCursor(items.get(items.size() - 1).getId());
        var pagedResult = ConnectionImpl
                .<PersonProfil>builder()
                .setPageInfo(
                        new DefaultPageInfo(firstItem, lastItem, false, dbResult.size() > pageSize)
                )
                .setNodes(items)
                .setEdges(
                        items
                                .stream()
                                .map(item -> new DefaultEdge<PersonProfil>(item, new DefaultConnectionCursor(item.getId())))
                                .collect(Collectors.toList())
                )
                .setTotalCount(totalCount != null ? Math.min(1000, totalCount) : null)
                .build();
        return CompletableFuture.completedFuture(pagedResult);
    }

    @Override
    public CompletableFuture<ExtendedConnection<StudentVedInstitusjon>> studenter(
            String eierInstitusjonsnummer, Integer first, String after, DataFetchingEnvironment env)
            throws Exception {
        int pageSize = Optional.ofNullable(first).orElse(10);
        var selectionSet = new ConnectionSelectionSets(EnvironmentUtils.getSelectionSetsFromEnvironment(env));
        var dbResult = queryDBQueries.studenterForQuery(eierInstitusjonsnummer, pageSize, after, selectionSet);
        var totalCount = selectionSet.contains("totalCount") ?  queryDBQueries.countStudenterForQuery(eierInstitusjonsnummer) : null;
        var size = Math.min(dbResult.size(), pageSize);
        var items = dbResult.subList(0, size);
        var firstItem = items.size() == 0 ? null : new DefaultConnectionCursor(items.get(0).getId());
        var lastItem = items.size() == 0 ? null : new DefaultConnectionCursor(items.get(items.size() - 1).getId());
        var pagedResult = ConnectionImpl
                .<StudentVedInstitusjon>builder()
                .setPageInfo(
                        new DefaultPageInfo(firstItem, lastItem, false, dbResult.size() > pageSize)
                )
                .setNodes(items)
                .setEdges(
                        items
                                .stream()
                                .map(item -> new DefaultEdge<StudentVedInstitusjon>(item, new DefaultConnectionCursor(item.getId())))
                                .collect(Collectors.toList())
                )
                .setTotalCount(totalCount != null ? Math.min(1000, totalCount) : null)
                .build();
        return CompletableFuture.completedFuture(pagedResult);
    }
}
