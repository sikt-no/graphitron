extend type Query {
    helloWorldAgain(name: String!): HelloWorldObject @service(service: {className: "no.sikt.graphitron.example.service.HelloWorldService"})
    helloWorldAgainWithJooqRecordInput(input: CustomerInput!): HelloWorldObject @service(service: {className: "no.sikt.graphitron.example.service.HelloWorldService"})
    helloWorldAgainWithJavaRecordInput(input: HelloWorldInputObject!): HelloWorldObject @service(service: {className: "no.sikt.graphitron.example.service.HelloWorldService"})
    helloWorldWithSplitQueryField(addressIds: [String]!): [HelloWorldObject] @service(service: {className: "no.sikt.graphitron.example.service.HelloWorldService"})

    customerService: Customer @service(service: {className: "no.sikt.graphitron.example.service.CustomerService", method: "customer"})
    customerServiceWithJooqRecordInput(input: CustomerInput!): Customer @service(service: {className: "no.sikt.graphitron.example.service.CustomerService", method: "customer"})
    customerServiceWithJavaRecordInput(input: HelloWorldInputObject!): Customer @service(service: {className: "no.sikt.graphitron.example.service.CustomerService", method: "customer"})

    mockUpdateAddressAndCustomer: MockUpdateAddressAndCustomerPayload @service(service: {className: "no.sikt.graphitron.example.service.MockService"})
}

type MockUpdateAddressAndCustomerPayload {
    result: MockUpdateAddressAndCustomerResult
}

type MockUpdateAddressAndCustomerResult @record(record: {className: "no.sikt.graphitron.example.service.records.MockUpdateAddressAndCustomerResultRecord"}) {
    customers: [Customer] @splitQuery
    address: Address @splitQuery
    extraAddress: Address @field(name: "myAddress") @splitQuery
}

type HelloWorldObject @record(record: {className: "no.sikt.graphitron.example.service.records.HelloWorldRecord"}){
    greeting: String
    film: Film @splitQuery
    wrapper: CustomerWrapper
}

type CustomerWrapper {
    customer: Customer @splitQuery
}

input HelloWorldInputObject @record(record: {className: "no.sikt.graphitron.example.service.records.HelloWorldInput"}){
    name: String
    customerId: ID @nodeId(typeName: "Customer")
}

input CustomerInput @table(name: "CUSTOMER") {
    id: ID! @nodeId(typeName: "Customer")
    addressId: ID @nodeId(typeName: "Address") @reference(path: [{key: "CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY"}])
    firstName: String @field(name: "FIRST_NAME")
}

extend type Mutation {
    createCustomerEmail(input: [String!]!)
    : CreateCustomerEmailPayload @service(
        service: {
            className: "no.sikt.graphitron.example.service.CustomerService",
            method: "createCustomerEmail"
        }
    )
}

type CreateCustomerEmailPayload{
    customers: [Customer!]! @splitQuery
}