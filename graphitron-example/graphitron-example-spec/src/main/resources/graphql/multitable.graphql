extend type Query {
    reachableByEmail: [PersonWithEmail] @asConnection
    rentals: [Rental] @asConnection
}

interface PersonWithEmail {
    email: String
    address: Address @splitQuery
}

type StaffWithEmail implements PersonWithEmail @table(name: "STAFF") {
    email: String
    address: Address @splitQuery
    store: Store @splitQuery @reference(path: [{key: "STAFF__STAFF_STORE_ID_FKEY"}])
}

type CustomerWithEmail implements PersonWithEmail @table(name: "CUSTOMER") {
    name: CustomerName
    email: String
    address: Address @splitQuery
}

extend type Payment {
    staffAndCustomers(email: String): [PersonWithEmail] @splitQuery
    staffAndCustomersPaginated: [PersonWithEmail] @asConnection @splitQuery

    mostImportantCustomers: [PersonWithEmail] @multitableReference(routes: [
        {typeName: "StaffWithEmail", path: [{condition: {method: "mostImportantCustomersForPayment", className: "no.sikt.graphitron.example.service.conditions.PersonWithEmailConditions"}}]},
        {typeName: "CustomerWithEmail", path: [{key: "PAYMENT__PAYMENT_CUSTOMER_ID_FKEY", condition: {method: "mostImportantCustomersForPayment", className: "no.sikt.graphitron.example.service.conditions.PersonWithEmailConditions"}}]}
    ]) @splitQuery
}

extend type Film {
    actorsAndCategories: [FilmActorAndFilmCategoryUnion] @asConnection
}

union FilmActorAndFilmCategoryUnion = FilmActor | FilmCategory

type Rental @table {
    rentalId: Int @field(name: "RENTAL_ID")

    allContactPersons: [PersonWithEmail] @multitableReference(routes: [
        {typeName: "StaffWithEmail", path: [{table: "PAYMENT"}]},
        {typeName: "CustomerWithEmail", path: [{table: "PAYMENT"}, {key: "PAYMENT__PAYMENT_CUSTOMER_ID_FKEY"}]}
    ]) @splitQuery

    allContactPersonsPaginated: [PersonWithEmail] @multitableReference(routes: [
        {typeName: "StaffWithEmail", path: [{key: "PAYMENT__PAYMENT_RENTAL_ID_FKEY"}, {table: "STAFF"}]},
        {typeName: "CustomerWithEmail", path: [{table: "PAYMENT"}]}
    ]) @asConnection
}