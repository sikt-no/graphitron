/*
 * This file is generated by jOOQ.
 */
package no.sikt.graphitron.example.generated.jooq.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import no.sikt.graphitron.example.generated.jooq.Keys;
import no.sikt.graphitron.example.generated.jooq.Public;
import no.sikt.graphitron.example.generated.jooq.tables.Film.FilmPath;
import no.sikt.graphitron.example.generated.jooq.tables.records.LanguageRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Language extends TableImpl<LanguageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.language</code>
     */
    public static final Language LANGUAGE = new Language();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LanguageRecord> getRecordType() {
        return LanguageRecord.class;
    }

    /**
     * The column <code>public.language.language_id</code>.
     */
    public final TableField<LanguageRecord, Integer> LANGUAGE_ID = createField(DSL.name("language_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.language.name</code>.
     */
    public final TableField<LanguageRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.language.last_update</code>.
     */
    public final TableField<LanguageRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Language(Name alias, Table<LanguageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Language(Name alias, Table<LanguageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.language</code> table reference
     */
    public Language(String alias) {
        this(DSL.name(alias), LANGUAGE);
    }

    /**
     * Create an aliased <code>public.language</code> table reference
     */
    public Language(Name alias) {
        this(alias, LANGUAGE);
    }

    /**
     * Create a <code>public.language</code> table reference
     */
    public Language() {
        this(DSL.name("language"), null);
    }

    public <O extends Record> Language(Table<O> path, ForeignKey<O, LanguageRecord> childPath, InverseForeignKey<O, LanguageRecord> parentPath) {
        super(path, childPath, parentPath, LANGUAGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LanguagePath extends Language implements Path<LanguageRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LanguagePath(Table<O> path, ForeignKey<O, LanguageRecord> childPath, InverseForeignKey<O, LanguageRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LanguagePath(Name alias, Table<LanguageRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LanguagePath as(String alias) {
            return new LanguagePath(DSL.name(alias), this);
        }

        @Override
        public LanguagePath as(Name alias) {
            return new LanguagePath(alias, this);
        }

        @Override
        public LanguagePath as(Table<?> alias) {
            return new LanguagePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<LanguageRecord, Integer> getIdentity() {
        return (Identity<LanguageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LanguageRecord> getPrimaryKey() {
        return Keys.LANGUAGE_PKEY;
    }

    private transient FilmPath _filmLanguageIdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.film</code> table,
     * via the <code>film_language_id_fkey</code> key
     */
    public FilmPath filmLanguageIdFkey() {
        if (_filmLanguageIdFkey == null)
            _filmLanguageIdFkey = new FilmPath(this, null, Keys.FILM__FILM_LANGUAGE_ID_FKEY.getInverseKey());

        return _filmLanguageIdFkey;
    }

    private transient FilmPath _filmOriginalLanguageIdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.film</code> table,
     * via the <code>film_original_language_id_fkey</code> key
     */
    public FilmPath filmOriginalLanguageIdFkey() {
        if (_filmOriginalLanguageIdFkey == null)
            _filmOriginalLanguageIdFkey = new FilmPath(this, null, Keys.FILM__FILM_ORIGINAL_LANGUAGE_ID_FKEY.getInverseKey());

        return _filmOriginalLanguageIdFkey;
    }

    @Override
    public Language as(String alias) {
        return new Language(DSL.name(alias), this);
    }

    @Override
    public Language as(Name alias) {
        return new Language(alias, this);
    }

    @Override
    public Language as(Table<?> alias) {
        return new Language(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Language rename(String name) {
        return new Language(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Language rename(Name name) {
        return new Language(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Language rename(Table<?> name) {
        return new Language(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Language where(Condition condition) {
        return new Language(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Language where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Language where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Language where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Language where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Language where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Language where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Language where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Language whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Language whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    public org.jooq.SelectField<String> getId() {
        return DSL.row(LANGUAGE_ID)
            .mapping(String.class, org.jooq.Functions.nullOnAnyNull((s0) -> s0.toString()))
            .as(DSL.name("Id"));
    }

    public org.jooq.Condition hasId(String id) {
        return hasIds(java.util.Set.of(id));
    }

    public org.jooq.Condition hasIds(java.util.Set<String> ids) {
        var field = java.util.List.of(LANGUAGE_ID).get(0);
        var converted = ids.stream().map(it -> field.getDataType().convert(it)).collect(java.util.stream.Collectors.toList());
        return field.in(converted);
    }

    public java.util.List<TableField<no.sikt.graphitron.example.generated.jooq.tables.records.LanguageRecord, ?>> getIdFields() {
        return java.util.List.of(LANGUAGE_ID);
    }

    private static final java.util.Map<String, String> qualifiers = java.util.Map.of();

    public String getQualifier(String keyName) { return qualifiers.get(keyName); }
}
