/*
 * This file is generated by jOOQ.
 */
package no.sikt.graphitron.example.generated.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import no.sikt.graphitron.example.generated.jooq.Indexes;
import no.sikt.graphitron.example.generated.jooq.Keys;
import no.sikt.graphitron.example.generated.jooq.Public;
import no.sikt.graphitron.example.generated.jooq.tables.Film.FilmPath;
import no.sikt.graphitron.example.generated.jooq.tables.Rental.RentalPath;
import no.sikt.graphitron.example.generated.jooq.tables.Store.StorePath;
import no.sikt.graphitron.example.generated.jooq.tables.records.InventoryRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.12",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Inventory extends TableImpl<InventoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.inventory</code>
     */
    public static final Inventory INVENTORY = new Inventory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InventoryRecord> getRecordType() {
        return InventoryRecord.class;
    }

    /**
     * The column <code>public.inventory.inventory_id</code>.
     */
    public final TableField<InventoryRecord, Integer> INVENTORY_ID = createField(DSL.name("inventory_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.inventory.film_id</code>.
     */
    public final TableField<InventoryRecord, Short> FILM_ID = createField(DSL.name("film_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.inventory.store_id</code>.
     */
    public final TableField<InventoryRecord, Short> STORE_ID = createField(DSL.name("store_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.inventory.last_update</code>.
     */
    public final TableField<InventoryRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Inventory(Name alias, Table<InventoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Inventory(Name alias, Table<InventoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.inventory</code> table reference
     */
    public Inventory(String alias) {
        this(DSL.name(alias), INVENTORY);
    }

    /**
     * Create an aliased <code>public.inventory</code> table reference
     */
    public Inventory(Name alias) {
        this(alias, INVENTORY);
    }

    /**
     * Create a <code>public.inventory</code> table reference
     */
    public Inventory() {
        this(DSL.name("inventory"), null);
    }

    public <O extends Record> Inventory(Table<O> path, ForeignKey<O, InventoryRecord> childPath, InverseForeignKey<O, InventoryRecord> parentPath) {
        super(path, childPath, parentPath, INVENTORY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class InventoryPath extends Inventory implements Path<InventoryRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> InventoryPath(Table<O> path, ForeignKey<O, InventoryRecord> childPath, InverseForeignKey<O, InventoryRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private InventoryPath(Name alias, Table<InventoryRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public InventoryPath as(String alias) {
            return new InventoryPath(DSL.name(alias), this);
        }

        @Override
        public InventoryPath as(Name alias) {
            return new InventoryPath(alias, this);
        }

        @Override
        public InventoryPath as(Table<?> alias) {
            return new InventoryPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_STORE_ID_FILM_ID);
    }

    @Override
    public Identity<InventoryRecord, Integer> getIdentity() {
        return (Identity<InventoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<InventoryRecord> getPrimaryKey() {
        return Keys.INVENTORY_PKEY;
    }

    @Override
    public List<ForeignKey<InventoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INVENTORY__INVENTORY_FILM_ID_FKEY, Keys.INVENTORY__INVENTORY_STORE_ID_FKEY);
    }

    private transient FilmPath _film;

    /**
     * Get the implicit join path to the <code>public.film</code> table.
     */
    public FilmPath film() {
        if (_film == null)
            _film = new FilmPath(this, Keys.INVENTORY__INVENTORY_FILM_ID_FKEY, null);

        return _film;
    }

    private transient StorePath _store;

    /**
     * Get the implicit join path to the <code>public.store</code> table.
     */
    public StorePath store() {
        if (_store == null)
            _store = new StorePath(this, Keys.INVENTORY__INVENTORY_STORE_ID_FKEY, null);

        return _store;
    }

    private transient RentalPath _rental;

    /**
     * Get the implicit to-many join path to the <code>public.rental</code>
     * table
     */
    public RentalPath rental() {
        if (_rental == null)
            _rental = new RentalPath(this, null, Keys.RENTAL__RENTAL_INVENTORY_ID_FKEY.getInverseKey());

        return _rental;
    }

    @Override
    public Inventory as(String alias) {
        return new Inventory(DSL.name(alias), this);
    }

    @Override
    public Inventory as(Name alias) {
        return new Inventory(alias, this);
    }

    @Override
    public Inventory as(Table<?> alias) {
        return new Inventory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Inventory rename(String name) {
        return new Inventory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Inventory rename(Name name) {
        return new Inventory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Inventory rename(Table<?> name) {
        return new Inventory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventory where(Condition condition) {
        return new Inventory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inventory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inventory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inventory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inventory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    public org.jooq.SelectField<String> getId() {
        return DSL.row(INVENTORY_ID)
            .mapping(String.class, org.jooq.Functions.nullOnAnyNull((s0) -> s0.toString()))
            .as(DSL.name("Id"));
    }

    public java.util.List<TableField<no.sikt.graphitron.example.generated.jooq.tables.records.InventoryRecord, ?>> getIdFields() {
        return java.util.List.of(INVENTORY_ID);
    }

    public org.jooq.SelectField<String> getFilmId() {
        return DSL.row(FILM_ID)
            .mapping(String.class, org.jooq.Functions.nullOnAnyNull((s0) -> s0.toString()))
            .as(DSL.name("film_id"));
    }

    public org.jooq.Condition hasFilmId(String id) {
        return hasFilmIds(java.util.Set.of(id));
    }

    public org.jooq.Condition hasFilmIds(java.util.Set<String> ids) {
        var field = java.util.List.of(FILM_ID).get(0);
        var converted = ids.stream().map(it -> field.getDataType().convert(it)).collect(java.util.stream.Collectors.toList());
        return field.in(converted);
    }

    public org.jooq.SelectField<String> getStoreId() {
        return DSL.row(STORE_ID)
            .mapping(String.class, org.jooq.Functions.nullOnAnyNull((s0) -> s0.toString()))
            .as(DSL.name("store_id"));
    }

    public org.jooq.Condition hasStoreId(String id) {
        return hasStoreIds(java.util.Set.of(id));
    }

    public org.jooq.Condition hasStoreIds(java.util.Set<String> ids) {
        var field = java.util.List.of(STORE_ID).get(0);
        var converted = ids.stream().map(it -> field.getDataType().convert(it)).collect(java.util.stream.Collectors.toList());
        return field.in(converted);
    }

    private static final java.util.Map<String, String> qualifiers = java.util.Map.ofEntries(
        java.util.Map.entry("inventory_film_id_fkey", "FilmId"),
        java.util.Map.entry("inventory_store_id_fkey", "StoreId")
    );

    public String getQualifier(String keyName) { return qualifiers.get(keyName); }
}
