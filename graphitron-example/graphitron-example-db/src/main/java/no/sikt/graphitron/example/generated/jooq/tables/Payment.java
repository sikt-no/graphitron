/*
 * This file is generated by jOOQ.
 */
package no.sikt.graphitron.example.generated.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import no.sikt.graphitron.example.generated.jooq.Indexes;
import no.sikt.graphitron.example.generated.jooq.Keys;
import no.sikt.graphitron.example.generated.jooq.Public;
import no.sikt.graphitron.example.generated.jooq.tables.Customer.CustomerPath;
import no.sikt.graphitron.example.generated.jooq.tables.Rental.RentalPath;
import no.sikt.graphitron.example.generated.jooq.tables.Staff.StaffPath;
import no.sikt.graphitron.example.generated.jooq.tables.records.PaymentRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Payment extends TableImpl<PaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.payment</code>
     */
    public static final Payment PAYMENT = new Payment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentRecord> getRecordType() {
        return PaymentRecord.class;
    }

    /**
     * The column <code>public.payment.payment_id</code>.
     */
    public final TableField<PaymentRecord, Integer> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.payment.customer_id</code>.
     */
    public final TableField<PaymentRecord, Short> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.payment.staff_id</code>.
     */
    public final TableField<PaymentRecord, Short> STAFF_ID = createField(DSL.name("staff_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.payment.rental_id</code>.
     */
    public final TableField<PaymentRecord, Integer> RENTAL_ID = createField(DSL.name("rental_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payment.amount</code>.
     */
    public final TableField<PaymentRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(5, 2).nullable(false), this, "");

    /**
     * The column <code>public.payment.payment_date</code>.
     */
    public final TableField<PaymentRecord, LocalDateTime> PAYMENT_DATE = createField(DSL.name("payment_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Payment(Name alias, Table<PaymentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Payment(Name alias, Table<PaymentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.payment</code> table reference
     */
    public Payment(String alias) {
        this(DSL.name(alias), PAYMENT);
    }

    /**
     * Create an aliased <code>public.payment</code> table reference
     */
    public Payment(Name alias) {
        this(alias, PAYMENT);
    }

    /**
     * Create a <code>public.payment</code> table reference
     */
    public Payment() {
        this(DSL.name("payment"), null);
    }

    public <O extends Record> Payment(Table<O> path, ForeignKey<O, PaymentRecord> childPath, InverseForeignKey<O, PaymentRecord> parentPath) {
        super(path, childPath, parentPath, PAYMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PaymentPath extends Payment implements Path<PaymentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PaymentPath(Table<O> path, ForeignKey<O, PaymentRecord> childPath, InverseForeignKey<O, PaymentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PaymentPath(Name alias, Table<PaymentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PaymentPath as(String alias) {
            return new PaymentPath(DSL.name(alias), this);
        }

        @Override
        public PaymentPath as(Name alias) {
            return new PaymentPath(alias, this);
        }

        @Override
        public PaymentPath as(Table<?> alias) {
            return new PaymentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_CUSTOMER_ID, Indexes.IDX_FK_STAFF_ID);
    }

    @Override
    public Identity<PaymentRecord, Integer> getIdentity() {
        return (Identity<PaymentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PaymentRecord> getPrimaryKey() {
        return Keys.PAYMENT_PKEY;
    }

    @Override
    public List<ForeignKey<PaymentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PAYMENT__PAYMENT_CUSTOMER_ID_FKEY, Keys.PAYMENT__PAYMENT_RENTAL_ID_FKEY, Keys.PAYMENT__PAYMENT_STAFF_ID_FKEY);
    }

    private transient CustomerPath _customer;

    /**
     * Get the implicit join path to the <code>public.customer</code> table.
     */
    public CustomerPath customer() {
        if (_customer == null)
            _customer = new CustomerPath(this, Keys.PAYMENT__PAYMENT_CUSTOMER_ID_FKEY, null);

        return _customer;
    }

    private transient RentalPath _rental;

    /**
     * Get the implicit join path to the <code>public.rental</code> table.
     */
    public RentalPath rental() {
        if (_rental == null)
            _rental = new RentalPath(this, Keys.PAYMENT__PAYMENT_RENTAL_ID_FKEY, null);

        return _rental;
    }

    private transient StaffPath _staff;

    /**
     * Get the implicit join path to the <code>public.staff</code> table.
     */
    public StaffPath staff() {
        if (_staff == null)
            _staff = new StaffPath(this, Keys.PAYMENT__PAYMENT_STAFF_ID_FKEY, null);

        return _staff;
    }

    @Override
    public Payment as(String alias) {
        return new Payment(DSL.name(alias), this);
    }

    @Override
    public Payment as(Name alias) {
        return new Payment(alias, this);
    }

    @Override
    public Payment as(Table<?> alias) {
        return new Payment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(String name) {
        return new Payment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(Name name) {
        return new Payment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(Table<?> name) {
        return new Payment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payment where(Condition condition) {
        return new Payment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    public org.jooq.SelectField<String> getId() {
        return DSL.row(PAYMENT_ID)
            .mapping(String.class, org.jooq.Functions.nullOnAnyNull((s0) -> s0.toString()))
            .as(DSL.name("Id"));
    }

    public java.util.List<TableField<no.sikt.graphitron.example.generated.jooq.tables.records.PaymentRecord, ?>> getIdFields() {
        return java.util.List.of(PAYMENT_ID);
    }

    public org.jooq.SelectField<String> getCustomerId() {
        return DSL.row(CUSTOMER_ID)
            .mapping(String.class, org.jooq.Functions.nullOnAnyNull((s0) -> s0.toString()))
            .as(DSL.name("customer_id"));
    }

    public org.jooq.Condition hasCustomerId(String id) {
        return hasCustomerIds(java.util.Set.of(id));
    }

    public org.jooq.Condition hasCustomerIds(java.util.Set<String> ids) {
        var field = java.util.List.of(CUSTOMER_ID).get(0);
        var converted = ids.stream().map(it -> field.getDataType().convert(it)).collect(java.util.stream.Collectors.toList());
        return field.in(converted);
    }

    public org.jooq.SelectField<String> getRentalId() {
        return DSL.row(RENTAL_ID)
            .mapping(String.class, org.jooq.Functions.nullOnAnyNull((s0) -> s0.toString()))
            .as(DSL.name("rental_id"));
    }

    public org.jooq.Condition hasRentalId(String id) {
        return hasRentalIds(java.util.Set.of(id));
    }

    public org.jooq.Condition hasRentalIds(java.util.Set<String> ids) {
        var field = java.util.List.of(RENTAL_ID).get(0);
        var converted = ids.stream().map(it -> field.getDataType().convert(it)).collect(java.util.stream.Collectors.toList());
        return field.in(converted);
    }

    public org.jooq.SelectField<String> getStaffId() {
        return DSL.row(STAFF_ID)
            .mapping(String.class, org.jooq.Functions.nullOnAnyNull((s0) -> s0.toString()))
            .as(DSL.name("staff_id"));
    }

    public org.jooq.Condition hasStaffId(String id) {
        return hasStaffIds(java.util.Set.of(id));
    }

    public org.jooq.Condition hasStaffIds(java.util.Set<String> ids) {
        var field = java.util.List.of(STAFF_ID).get(0);
        var converted = ids.stream().map(it -> field.getDataType().convert(it)).collect(java.util.stream.Collectors.toList());
        return field.in(converted);
    }

    private static final java.util.Map<String, String> qualifiers = java.util.Map.ofEntries(
        java.util.Map.entry("payment_customer_id_fkey", "CustomerId"),
        java.util.Map.entry("payment_rental_id_fkey", "RentalId"),
        java.util.Map.entry("payment_staff_id_fkey", "StaffId")
    );

    public String getQualifier(String keyName) { return qualifiers.get(keyName); }
}
