input InnerInput {
  id: ID!
}

input InnerInput2 {
  id: ID! @feature(flags : ["a"])
}

input InnerInput3 {
  id: ID! @feature(flags : ["b"])
}

type InnerObject {
  id: ID!
  f0(a0: String @feature(flags : "EXTRA")): String!
  inner: InnerObject2 @dir @feature(flags : ["a"])
  f1(a0: String @dir2(param : "ARG") @feature(flags : ["a"])): String! @feature(flags : ["a"])
  double: ID @feature(flags : ["a"])
  triple: ID @feature(flags : ["FLAG", "a"])
  inner3: InnerObject3 @dir @feature(flags : ["b"])
  extraFlag: ID @feature(flags : ["EXTRA", "b"])
}

type InnerObject2 {
  id: ID! @feature(flags : ["a"])
}

type InnerObject3 {
  id: ID! @feature(flags : ["b"])
}

type InnerObjectC implements Interface {
  id: ID! @feature(flags : ["a"])
}

input Input {
  id: ID!
  inner: InnerInput @dir
  inner2: InnerInput2 @dir2(param: "ARG") @feature(flags : ["a"])
  double: ID @feature(flags : ["a"])
  triple: ID @feature(flags : ["FLAG", "a"])
  inner3: InnerInput3 @feature(flags : ["b"])
  extraFlag: ID @feature(flags : ["EXTRA", "b"])
}

interface Interface {
  id: ID! @feature(flags : ["a"])
}

interface Node {
  id: ID!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  getObject(a0: String! @dir @feature(flags : "EXTRA")): SomeObject
  getObjectWithInputs(a0: Input! @dir @feature(flags : "EXTRA"), a1: [Input!]): SomeObject @dir
  getObject2: InnerObject2 @feature(flags : ["a"])
  getObject3: [InnerObjectC!]! @feature(flags : ["a"])
  getObject4: SomeEnum @feature(flags : ["a"])
}

enum SomeEnum {
  e0 @feature(flags : ["a"])
  e1 @dir(param : "PARAM") @feature(flags : ["a"])
}

type SomeObject {
  id: ID!
  inner: [InnerObject!]! @dir
}

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @dir(param: String) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

directive @feature(flags: [String!]!) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

directive @dir2(param: String) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
) on SCALAR
