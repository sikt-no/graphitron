/*
 * This file is generated by jOOQ.
 */
package no.sikt.graphitron.jooq.generated.testdata.public_.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import no.sikt.graphitron.jooq.generated.testdata.public_.Keys;
import no.sikt.graphitron.jooq.generated.testdata.public_.Public;
import no.sikt.graphitron.jooq.generated.testdata.public_.tables.Vacation.VacationPath;
import no.sikt.graphitron.jooq.generated.testdata.public_.tables.records.VacationDestinationRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.18",
        "schema version:1.10"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VacationDestination extends TableImpl<VacationDestinationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vacation_destination</code>
     */
    public static final VacationDestination VACATION_DESTINATION = new VacationDestination();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VacationDestinationRecord> getRecordType() {
        return VacationDestinationRecord.class;
    }

    /**
     * The column <code>public.vacation_destination.destination_id</code>.
     */
    public final TableField<VacationDestinationRecord, Long> DESTINATION_ID = createField(DSL.name("destination_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.vacation_destination.country_name</code>.
     */
    public final TableField<VacationDestinationRecord, String> COUNTRY_NAME = createField(DSL.name("country_name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>public.vacation_destination.vacation_id</code>.
     */
    public final TableField<VacationDestinationRecord, Long> VACATION_ID = createField(DSL.name("vacation_id"), SQLDataType.BIGINT, this, "");

    private VacationDestination(Name alias, Table<VacationDestinationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VacationDestination(Name alias, Table<VacationDestinationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.vacation_destination</code> table
     * reference
     */
    public VacationDestination(String alias) {
        this(DSL.name(alias), VACATION_DESTINATION);
    }

    /**
     * Create an aliased <code>public.vacation_destination</code> table
     * reference
     */
    public VacationDestination(Name alias) {
        this(alias, VACATION_DESTINATION);
    }

    /**
     * Create a <code>public.vacation_destination</code> table reference
     */
    public VacationDestination() {
        this(DSL.name("vacation_destination"), null);
    }

    public <O extends Record> VacationDestination(Table<O> path, ForeignKey<O, VacationDestinationRecord> childPath, InverseForeignKey<O, VacationDestinationRecord> parentPath) {
        super(path, childPath, parentPath, VACATION_DESTINATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.19.18",
            "schema version:1.10"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class VacationDestinationPath extends VacationDestination implements Path<VacationDestinationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> VacationDestinationPath(Table<O> path, ForeignKey<O, VacationDestinationRecord> childPath, InverseForeignKey<O, VacationDestinationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VacationDestinationPath(Name alias, Table<VacationDestinationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VacationDestinationPath as(String alias) {
            return new VacationDestinationPath(DSL.name(alias), this);
        }

        @Override
        public VacationDestinationPath as(Name alias) {
            return new VacationDestinationPath(alias, this);
        }

        @Override
        public VacationDestinationPath as(Table<?> alias) {
            return new VacationDestinationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<VacationDestinationRecord, Long> getIdentity() {
        return (Identity<VacationDestinationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VacationDestinationRecord> getPrimaryKey() {
        return Keys.VACATION_DESTINATION_PKEY;
    }

    @Override
    public List<ForeignKey<VacationDestinationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VACATION_DESTINATION__VACATION_DESTINATION_VACATION_FKEY);
    }

    private transient VacationPath _vacation;

    /**
     * Get the implicit join path to the <code>public.vacation</code> table.
     */
    public VacationPath vacation() {
        if (_vacation == null)
            _vacation = new VacationPath(this, Keys.VACATION_DESTINATION__VACATION_DESTINATION_VACATION_FKEY, null);

        return _vacation;
    }

    @Override
    public VacationDestination as(String alias) {
        return new VacationDestination(DSL.name(alias), this);
    }

    @Override
    public VacationDestination as(Name alias) {
        return new VacationDestination(alias, this);
    }

    @Override
    public VacationDestination as(Table<?> alias) {
        return new VacationDestination(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VacationDestination rename(String name) {
        return new VacationDestination(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VacationDestination rename(Name name) {
        return new VacationDestination(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VacationDestination rename(Table<?> name) {
        return new VacationDestination(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VacationDestination where(Condition condition) {
        return new VacationDestination(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VacationDestination where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VacationDestination where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VacationDestination where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VacationDestination where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VacationDestination where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VacationDestination where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VacationDestination where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VacationDestination whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VacationDestination whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
