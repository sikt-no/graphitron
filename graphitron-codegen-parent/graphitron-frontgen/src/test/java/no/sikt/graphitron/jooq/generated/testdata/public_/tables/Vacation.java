/*
 * This file is generated by jOOQ.
 */
package no.sikt.graphitron.jooq.generated.testdata.public_.tables;


import java.util.Collection;

import javax.annotation.processing.Generated;

import no.sikt.graphitron.jooq.generated.testdata.public_.Keys;
import no.sikt.graphitron.jooq.generated.testdata.public_.Public;
import no.sikt.graphitron.jooq.generated.testdata.public_.tables.VacationDestination.VacationDestinationPath;
import no.sikt.graphitron.jooq.generated.testdata.public_.tables.records.VacationRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.18",
        "schema version:1.10"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Vacation extends TableImpl<VacationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vacation</code>
     */
    public static final Vacation VACATION = new Vacation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VacationRecord> getRecordType() {
        return VacationRecord.class;
    }

    /**
     * The column <code>public.vacation.vacation_id</code>.
     */
    public final TableField<VacationRecord, Long> VACATION_ID = createField(DSL.name("vacation_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.vacation.description</code>.
     */
    public final TableField<VacationRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>public.vacation.parent_id</code>.
     */
    public final TableField<VacationRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "");

    private Vacation(Name alias, Table<VacationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Vacation(Name alias, Table<VacationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.vacation</code> table reference
     */
    public Vacation(String alias) {
        this(DSL.name(alias), VACATION);
    }

    /**
     * Create an aliased <code>public.vacation</code> table reference
     */
    public Vacation(Name alias) {
        this(alias, VACATION);
    }

    /**
     * Create a <code>public.vacation</code> table reference
     */
    public Vacation() {
        this(DSL.name("vacation"), null);
    }

    public <O extends Record> Vacation(Table<O> path, ForeignKey<O, VacationRecord> childPath, InverseForeignKey<O, VacationRecord> parentPath) {
        super(path, childPath, parentPath, VACATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.19.18",
            "schema version:1.10"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class VacationPath extends Vacation implements Path<VacationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> VacationPath(Table<O> path, ForeignKey<O, VacationRecord> childPath, InverseForeignKey<O, VacationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VacationPath(Name alias, Table<VacationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VacationPath as(String alias) {
            return new VacationPath(DSL.name(alias), this);
        }

        @Override
        public VacationPath as(Name alias) {
            return new VacationPath(alias, this);
        }

        @Override
        public VacationPath as(Table<?> alias) {
            return new VacationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<VacationRecord, Long> getIdentity() {
        return (Identity<VacationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VacationRecord> getPrimaryKey() {
        return Keys.VACATION_PKEY;
    }

    private transient VacationDestinationPath _vacationDestination;

    /**
     * Get the implicit to-many join path to the
     * <code>public.vacation_destination</code> table
     */
    public VacationDestinationPath vacationDestination() {
        if (_vacationDestination == null)
            _vacationDestination = new VacationDestinationPath(this, null, Keys.VACATION_DESTINATION__VACATION_DESTINATION_VACATION_FKEY.getInverseKey());

        return _vacationDestination;
    }

    @Override
    public Vacation as(String alias) {
        return new Vacation(DSL.name(alias), this);
    }

    @Override
    public Vacation as(Name alias) {
        return new Vacation(alias, this);
    }

    @Override
    public Vacation as(Table<?> alias) {
        return new Vacation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vacation rename(String name) {
        return new Vacation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vacation rename(Name name) {
        return new Vacation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vacation rename(Table<?> name) {
        return new Vacation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vacation where(Condition condition) {
        return new Vacation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vacation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vacation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vacation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vacation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vacation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vacation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vacation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vacation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vacation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
