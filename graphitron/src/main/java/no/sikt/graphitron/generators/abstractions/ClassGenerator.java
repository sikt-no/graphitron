package no.sikt.graphitron.generators.abstractions;

import com.palantir.javapoet.TypeSpec;

import java.util.List;
import java.util.Map;

/**
 * A class generator generates a set of classes for any purpose.
 */
public interface ClassGenerator {
    /**
     * Generate the classes and return the list of TypeSpecs.
     */
    List<TypeSpec> generateAll();
    /**
     * @param path The path to the output directory.
     * @param packagePath The package path that this class should be written to.
     */
    void generateAllToDirectory(String path, String packagePath);

    /**
     * Create the {@link com.palantir.javapoet.JavaFile JavaFile} for this class, add any common static imports and write it to file.
     * @param generatedClass A complete javapoet {@link TypeSpec}.
     * @param path           The path to the output directory.
     * @param packagePath    The package path that this class should be written to.
     */
    void writeToFile(TypeSpec generatedClass, String path, String packagePath);

    /**
     * Create the {@link com.palantir.javapoet.JavaFile JavaFile} for this class, add any common static imports and write it to file.
     * @param generatedClass A complete javapoet {@link TypeSpec}.
     * @param path           The path to the output directory.
     * @param packagePath    The package path that this class should be written to.
     * @param directoryOverride Override the directory within the package where the class is saved to.
     */
    void writeToFile(TypeSpec generatedClass, String path, String packagePath, String directoryOverride);

    /**
     * Generate the classes and write them to a String.
     */
    Map<String, String> generateAllAsMap();

    /**
     * Create the {@link com.palantir.javapoet.JavaFile JavaFile} for this class, add any common static imports and render the file as a string.
     * @param generatedClass A complete javapoet {@link TypeSpec}.
     */
    String writeToString(TypeSpec generatedClass);

    /**
     * @return The final directory path within the package where the classes are ultimately saved.
     */
    String getDefaultSaveDirectoryName();

    /**
     * @return The suffix that is to be added to the end of file names generated by this class.
     */
    String getFileNameSuffix();

    /**
     * @param className  The name of the class.
     * @param generators List of method generators that this class should use to generate its methods.
     * @return A completed {@link TypeSpec.Builder} for this class, where all methods have already been added.
     */
    TypeSpec.Builder getSpec(String className, List<? extends MethodGenerator> generators);
}
