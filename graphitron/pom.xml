<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>no.sikt</groupId>
    <artifactId>graphitron-parent</artifactId>
    <version>${revision}${changelist}</version>
  </parent>
  <artifactId>graphitron</artifactId>

  <dependencies>
    <dependency>
      <groupId>com.graphql-java</groupId>
      <artifactId>graphql-java</artifactId>
    </dependency>
    <dependency>
      <groupId>com.graphql-java</groupId>
      <artifactId>java-dataloader</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.palantir.javapoet</groupId>
      <artifactId>javapoet</artifactId>
    </dependency>
    <dependency>
      <groupId>jakarta.platform</groupId>
      <artifactId>jakarta.jakartaee-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.jooq</groupId>
      <artifactId>jooq</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jooq</groupId>
      <artifactId>jooq-codegen</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jetbrains</groupId>
      <artifactId>annotations</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-text</artifactId>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>graphitron-error-handling-javax</artifactId>
      <version>${project.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>graphitron-common</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.jooq</groupId>
        <artifactId>jooq-codegen-maven</artifactId>
        <executions>
          <execution>
            <id>jooq-test-code-generator</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>generate</goal>
            </goals>

            <configuration>
              <jdbc>
                <driver>org.testcontainers.jdbc.ContainerDatabaseDriver</driver>
                <url>${db.url}</url>
                <user>${db.username}</user>
                <password>${db.password}</password>
              </jdbc>
              <generator>
                <name>no.sikt.jooq.IdBasedGenerator</name>
                <database>
                  <includes>public.*|pg_catalog\.(pg_user|pg_user_mapping)</includes>
                  <syntheticObjects>
                    <!-- Adds a synthetic key to get the Keys class generated for pg_catalog -->
                    <primaryKeys>
                      <primaryKey>
                        <name>PK__PG_USER</name>
                        <tables>pg_catalog\.pg_user</tables>
                        <fields>
                          <field>USESYSID</field>
                        </fields>
                      </primaryKey>
                    </primaryKeys>
                  </syntheticObjects>
                  <schemata>
                    <schema>
                      <inputSchema>public</inputSchema>
                    </schema>
                    <schema>
                      <inputSchema>pg_catalog</inputSchema>
                    </schema>
                  </schemata>
                  <schemaVersionProvider>${testdata.schema.version}</schemaVersionProvider>
                  <includeIndexes>true</includeIndexes>
                </database>
                <target>
                  <packageName>no.sikt.graphitron.jooq.generated.testdata</packageName>
                  <directory>src/test/java</directory>
                </target>
              </generator>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.6.0</version>
          </dependency>
          <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <version>1.20.1</version>
          </dependency>
          <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-graphitron-directives-schema</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <includeArtifactIds>graphitron-common</includeArtifactIds>
              <outputDirectory>${graphitronDirectivesSchemaDirectory}</outputDirectory>
              <includes>directives.graphqls</includes>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>

  </build>
  <properties>
    <db.url>jdbc:tc:postgresql:13:///sakila?TC_TMPFS=/testtmpfs:rw&amp;TC_INITSCRIPT=file:${basedir}/src/test/resources/database/postgres-sakila-schema.sql</db.url>
    <db.username>postgres</db.username>
    <db.password>postgres</db.password>
    <!-- Change this version number if the generated jooq classes needs to be regenerated -->
    <testdata.schema.version>1.08</testdata.schema.version>
    <graphitronDirectivesSchemaDirectory>${project.build.directory}/graphitron-common/schema</graphitronDirectivesSchemaDirectory>
  </properties>
</project>
